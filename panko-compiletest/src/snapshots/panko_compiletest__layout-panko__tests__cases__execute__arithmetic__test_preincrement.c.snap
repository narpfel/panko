---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=layout"
    - "--stop-after=layout"
    - panko/tests/cases/execute/arithmetic/test_preincrement.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (declaration (putchar~0 `fn(∅: int) -> int` (static putchar)) ∅)
   (declaration (printf~1 `fn(∅: ptr<char const>, ...) -> int` (static printf)) ∅)
   (function-definition
      (f~2 `fn(p: ptr<int>) -> ptr<int>` (static f))
      (params
         (p~3 `ptr<int>` @0))
      (compound-statement
         (expression
            (call `int` @8
               (addressof `ptr<fn(∅: int) -> int>` @16
                  (putchar~0 `fn(∅: int) -> int` (static putchar)))
               (65 `int` @24)))
         (expression
            (call `int` @8
               (addressof `ptr<fn(∅: int) -> int>` @16
                  (putchar~0 `fn(∅: int) -> int` (static putchar)))
               (10 `int` @24)))
         (return (p~3 `ptr<int>` @0))))
   (function-definition
      (main~4 `fn(∅: int, argv: ptr<ptr<char>>) -> int` (static main))
      (params
         (main.unnamed_parameter.0~5 `int` @0)
         (argv~6 `ptr<ptr<char>>` @8))
      (compound-statement
         (definition (x~7 `int` @16) (42 `int` @16))
         (expression
            (call `int` @20
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @24
                  (printf~1 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @32
                  (deref `ptr<char>` @32
                     (ptr-add `ptr<ptr<char>>` @40
                        (argv~6 `ptr<ptr<char>>` @8)
                        (sign-extend `unsigned long` @48 (1 `int` @56)))))
               (combine `int` @48
                  (assign `ptr<int>` @56
                     (unnamed-temporary~8 `ptr<int>` @56)
                     (addressof `ptr<int>` @56
                        (x~7 `int` @16)))
                  (assign `int` @48
                     (deref `int` @48 (unnamed-temporary~8 `ptr<int>` @56))
                     (add `int` @64
                        (deref `int` @64 (unnamed-temporary~8 `ptr<int>` @56))
                        (1 `int` @72))))))
         (expression
            (call `int` @20
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @24
                  (printf~1 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @32
                  (deref `ptr<char>` @32
                     (ptr-add `ptr<ptr<char>>` @40
                        (argv~6 `ptr<ptr<char>>` @8)
                        (sign-extend `unsigned long` @48 (1 `int` @56)))))
               (x~7 `int` @16)))
         (expression
            (call `int` @20
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @24
                  (printf~1 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @32
                  (deref `ptr<char>` @32
                     (ptr-add `ptr<ptr<char>>` @40
                        (argv~6 `ptr<ptr<char>>` @8)
                        (sign-extend `unsigned long` @48 (1 `int` @56)))))
               (combine `int` @48
                  (assign `ptr<int>` @56
                     (unnamed-temporary~9 `ptr<int>` @56)
                     (addressof `ptr<int>` @56
                        (deref `int` @56
                           (call `ptr<int>` @72
                              (addressof `ptr<fn(p: ptr<int>) -> ptr<int>>` @80
                                 (f~2 `fn(p: ptr<int>) -> ptr<int>` (static f)))
                              (addressof `ptr<int>` @88
                                 (x~7 `int` @16))))))
                  (assign `int` @48
                     (deref `int` @48 (unnamed-temporary~9 `ptr<int>` @56))
                     (add `int` @64
                        (deref `int` @64 (unnamed-temporary~9 `ptr<int>` @56))
                        (1 `int` @72))))))
         (return (x~7 `int` @16)))))

----- stderr -----
