---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=layout"
    - "--stop-after=layout"
    - panko/tests/cases/execute/string/test_string_literal_octal_escape_sequences.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (declaration (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)) ∅)
   (declaration (strcmp~1 `fn(∅: ptr<char const>, ∅: ptr<char const>) -> int` (static strcmp)) ∅)
   (function-definition
      (main~2 `fn() -> int` (static main))
      (compound-statement
         (expression
            (call `int` @0
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @8
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @16
                  (noop-type-conversion `ptr<char>` @16
                     (addressof `ptr<array<char; 4>>` @16
                        (string `array<char; 4>` @void "%s\n\0"))))
               (noop-type-conversion `ptr<char>` @24
                  (addressof `ptr<array<char; 3>>` @24
                     (string `array<char; 3>` @void "<9\0")))))
         (expression
            (call `int` @0
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @8
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @16
                  (noop-type-conversion `ptr<char>` @16
                     (addressof `ptr<array<char; 4>>` @16
                        (string `array<char; 4>` @void "%s\n\0"))))
               (noop-type-conversion `ptr<char>` @24
                  (addressof `ptr<array<char; 8>>` @24
                     (string `array<char; 8>` @void "abcSghi\0")))))
         (expression
            (call `int` @0
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @8
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @16
                  (noop-type-conversion `ptr<char>` @16
                     (addressof `ptr<array<char; 4>>` @16
                        (string `array<char; 4>` @void "%d\n\0"))))
               (call `int` @24
                  (addressof `ptr<fn(∅: ptr<char const>, ∅: ptr<char const>) -> int>` @32
                     (strcmp~1 `fn(∅: ptr<char const>, ∅: ptr<char const>) -> int` (static strcmp)))
                  (noop-type-conversion `ptr<char const>` @40
                     (noop-type-conversion `ptr<char>` @40
                        (addressof `ptr<array<char; 2>>` @40
                           (string `array<char; 2>` @void "\n\0"))))
                  (noop-type-conversion `ptr<char const>` @48
                     (noop-type-conversion `ptr<char>` @48
                        (addressof `ptr<array<char; 2>>` @48
                           (string `array<char; 2>` @void "\n\0")))))))
         (expression
            (call `int` @0
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @8
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @16
                  (noop-type-conversion `ptr<char>` @16
                     (addressof `ptr<array<char; 4>>` @16
                        (string `array<char; 4>` @void "%d\n\0"))))
               (call `int` @24
                  (addressof `ptr<fn(∅: ptr<char const>, ∅: ptr<char const>) -> int>` @32
                     (strcmp~1 `fn(∅: ptr<char const>, ∅: ptr<char const>) -> int` (static strcmp)))
                  (noop-type-conversion `ptr<char const>` @40
                     (noop-type-conversion `ptr<char>` @40
                        (addressof `ptr<array<char; 4>>` @40
                           (string `array<char; 4>` @void "q\nq\0"))))
                  (noop-type-conversion `ptr<char const>` @48
                     (noop-type-conversion `ptr<char>` @48
                        (addressof `ptr<array<char; 4>>` @48
                           (string `array<char; 4>` @void "q\nq\0")))))))
         (definition (s~3 `ptr<char const>` @0)
            (noop-type-conversion `ptr<char const>` @0
               (noop-type-conversion `ptr<char>` @0
                  (addressof `ptr<array<char; 3>>` @0
                     (string `array<char; 3>` @void "\x011\0")))))
         (expression
            (call `int` @8
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @16
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @24
                  (noop-type-conversion `ptr<char>` @24
                     (addressof `ptr<array<char; 6>>` @24
                        (string `array<char; 6>` @void "%d%s\n\0"))))
               (sign-extend `int` @32
                  (deref `char const` @36
                     (ptr-add `ptr<char const>` @40
                        (s~3 `ptr<char const>` @0)
                        (sign-extend `unsigned long` @48 (0 `int` @56)))))
               (addressof `ptr<char const>` @48
                  (deref `char const` @48
                     (ptr-add `ptr<char const>` @56
                        (s~3 `ptr<char const>` @0)
                        (sign-extend `unsigned long` @64 (1 `int` @72)))))))
         (return (truncate `int` @8 (2 `unsigned long` @16))))))

----- stderr -----
