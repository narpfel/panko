---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=typeck"
    - "--stop-after=typeck"
    - panko/tests/cases/execute/preprocessor/test_empty_macro_before_open_paren.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit "panko/tests/cases/execute/preprocessor/test_empty_macro_before_open_paren.c"
   (declaration puts~0 `fn(∅: ptr<char const>) -> int` ∅)
   (function-definition
      a~1 `fn() -> void`
      (compound-statement
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                  (puts~0 `fn(∅: ptr<char const>) -> int`))
               (noop-type-conversion `ptr<char const>`
                  (noop-type-conversion `ptr<char>`
                     (addressof `ptr<array<char; 2>>`
                        (string `array<char; 2>` "a\0"))))))))
   (function-definition
      b~2 `fn() -> void`
      (compound-statement
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                  (puts~0 `fn(∅: ptr<char const>) -> int`))
               (noop-type-conversion `ptr<char const>`
                  (noop-type-conversion `ptr<char>`
                     (addressof `ptr<array<char; 2>>`
                        (string `array<char; 2>` "b\0"))))))))
   (function-definition
      c~3 `fn() -> void`
      (compound-statement
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                  (puts~0 `fn(∅: ptr<char const>) -> int`))
               (noop-type-conversion `ptr<char const>`
                  (noop-type-conversion `ptr<char>`
                     (addressof `ptr<array<char; 2>>`
                        (string `array<char; 2>` "c\0"))))))))
   (function-definition
      d~4 `fn() -> void`
      (compound-statement
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                  (puts~0 `fn(∅: ptr<char const>) -> int`))
               (noop-type-conversion `ptr<char const>`
                  (noop-type-conversion `ptr<char>`
                     (addressof `ptr<array<char; 2>>`
                        (string `array<char; 2>` "d\0"))))))))
   (function-definition
      main~5 `fn() -> int`
      (compound-statement
         (expression
            (call `void`
               (addressof `ptr<fn() -> void>`
                  (d~4 `fn() -> void`))))
         (expression
            (call `void`
               (addressof `ptr<fn() -> void>`
                  (d~4 `fn() -> void`)))))))

----- stderr -----
