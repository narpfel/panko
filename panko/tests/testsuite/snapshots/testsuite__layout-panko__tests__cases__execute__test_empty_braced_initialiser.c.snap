---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=layout"
    - "--stop-after=layout"
    - panko/tests/cases/execute/test_empty_braced_initialiser.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (declaration (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)) ∅)
   (function-definition
      (main~1 `fn(∅: int, argv: ptr<ptr<char>>) -> int` (static main))
      (params
         (main.unnamed_parameter.0~2 `int` @0)
         (argv~3 `ptr<ptr<char>>` @8))
      (compound-statement
         (definition (zero~4 `int` @16) (braced ∅))
         (expression
            (call `int` @20
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @24
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @32
                  (deref `ptr<char>` @32
                     (ptr-add `ptr<ptr<char>>` @40
                        (argv~3 `ptr<ptr<char>>` @8)
                        (sign-extend `unsigned long` @48 (1 `int` @56)))))
               (zero~4 `int` @16)))
         (definition (zeros~5 `array<int; 3>` @20) (braced ∅))
         (expression
            (call `int` @32
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @40
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @48
                  (deref `ptr<char>` @48
                     (ptr-add `ptr<ptr<char>>` @56
                        (argv~3 `ptr<ptr<char>>` @8)
                        (sign-extend `unsigned long` @64 (1 `int` @72)))))
               (deref `int` @64
                  (ptr-add `ptr<int>` @72
                     (noop-type-conversion `ptr<int>` @72
                        (addressof `ptr<array<int; 3>>` @72
                           (zeros~5 `array<int; 3>` @20)))
                     (sign-extend `unsigned long` @80 (0 `int` @88))))))
         (expression
            (call `int` @32
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @40
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @48
                  (deref `ptr<char>` @48
                     (ptr-add `ptr<ptr<char>>` @56
                        (argv~3 `ptr<ptr<char>>` @8)
                        (sign-extend `unsigned long` @64 (1 `int` @72)))))
               (deref `int` @64
                  (ptr-add `ptr<int>` @72
                     (noop-type-conversion `ptr<int>` @72
                        (addressof `ptr<array<int; 3>>` @72
                           (zeros~5 `array<int; 3>` @20)))
                     (sign-extend `unsigned long` @80 (1 `int` @88))))))
         (expression
            (call `int` @32
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @40
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @48
                  (deref `ptr<char>` @48
                     (ptr-add `ptr<ptr<char>>` @56
                        (argv~3 `ptr<ptr<char>>` @8)
                        (sign-extend `unsigned long` @64 (1 `int` @72)))))
               (deref `int` @64
                  (ptr-add `ptr<int>` @72
                     (noop-type-conversion `ptr<int>` @72
                        (addressof `ptr<array<int; 3>>` @72
                           (zeros~5 `array<int; 3>` @20)))
                     (sign-extend `unsigned long` @80 (2 `int` @88))))))
         (definition (long_zero~6 `int` @32) (braced ∅))
         (expression
            (call `int` @36
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @40
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @48
                  (deref `ptr<char>` @48
                     (ptr-add `ptr<ptr<char>>` @56
                        (argv~3 `ptr<ptr<char>>` @8)
                        (sign-extend `unsigned long` @64 (2 `int` @72)))))
               (long_zero~6 `int` @32))))))

----- stderr -----
