---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=typeck"
    - "--stop-after=typeck"
    - panko/tests/cases/execute/logical-ops/test_logical_or.c
snapshot_kind: text
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (declaration printf~0 `fn(∅: ptr<char const>, ...) -> int` ∅)
   (declaration f~1 `fn() -> int` ∅)
   (declaration g~2 `fn() -> int` ∅)
   (function-definition
      main~3 `fn(∅: int, argv: ptr<ptr<char>>) -> int`
      (params
         main.unnamed_parameter.0~4 `int`
         argv~5 `ptr<ptr<char>>`)
      (compound-statement
         (expression
            (call (addressof (printf~0 `fn(∅: ptr<char const>, ...) -> int`) `ptr<fn(∅: ptr<char const>, ...) -> int>`)
               (noop-type-conversion (deref (ptr-add (argv~5 `ptr<ptr<char>>`) (sign-extend (1 `int`) `unsigned long long`) `ptr<ptr<char>>`) `ptr<char>`) `ptr<char const>`)
               (logical-or
                  (0 `int`)
                  (0 `int`)
                  `int`)
               `int`))
         (expression
            (call (addressof (printf~0 `fn(∅: ptr<char const>, ...) -> int`) `ptr<fn(∅: ptr<char const>, ...) -> int>`)
               (noop-type-conversion (deref (ptr-add (argv~5 `ptr<ptr<char>>`) (sign-extend (1 `int`) `unsigned long long`) `ptr<ptr<char>>`) `ptr<char>`) `ptr<char const>`)
               (logical-or
                  (0 `int`)
                  (42 `int`)
                  `int`)
               `int`))
         (expression
            (call (addressof (printf~0 `fn(∅: ptr<char const>, ...) -> int`) `ptr<fn(∅: ptr<char const>, ...) -> int>`)
               (noop-type-conversion (deref (ptr-add (argv~5 `ptr<ptr<char>>`) (sign-extend (1 `int`) `unsigned long long`) `ptr<ptr<char>>`) `ptr<char>`) `ptr<char const>`)
               (logical-or
                  (27 `int`)
                  (0 `int`)
                  `int`)
               `int`))
         (expression
            (call (addressof (printf~0 `fn(∅: ptr<char const>, ...) -> int`) `ptr<fn(∅: ptr<char const>, ...) -> int>`)
               (noop-type-conversion (deref (ptr-add (argv~5 `ptr<ptr<char>>`) (sign-extend (1 `int`) `unsigned long long`) `ptr<ptr<char>>`) `ptr<char>`) `ptr<char const>`)
               (logical-or
                  (42 `int`)
                  (27 `int`)
                  `int`)
               `int`))
         (expression
            (logical-or
               (0 `int`)
               (call (addressof (printf~0 `fn(∅: ptr<char const>, ...) -> int`) `ptr<fn(∅: ptr<char const>, ...) -> int>`)
                  (noop-type-conversion (deref (ptr-add (argv~5 `ptr<ptr<char>>`) (sign-extend (1 `int`) `unsigned long long`) `ptr<ptr<char>>`) `ptr<char>`) `ptr<char const>`)
                  (123 `int`)
                  `int`)
               `int`))
         (expression
            (logical-or
               (123 `int`)
               (call (addressof (printf~0 `fn(∅: ptr<char const>, ...) -> int`) `ptr<fn(∅: ptr<char const>, ...) -> int>`)
                  (noop-type-conversion (deref (ptr-add (argv~5 `ptr<ptr<char>>`) (sign-extend (1 `int`) `unsigned long long`) `ptr<ptr<char>>`) `ptr<char>`) `ptr<char const>`)
                  (456 `int`)
                  `int`)
               `int`))
         (expression
            (logical-or
               (call (addressof (printf~0 `fn(∅: ptr<char const>, ...) -> int`) `ptr<fn(∅: ptr<char const>, ...) -> int>`)
                  (noop-type-conversion (deref (ptr-add (argv~5 `ptr<ptr<char>>`) (sign-extend (1 `int`) `unsigned long long`) `ptr<ptr<char>>`) `ptr<char>`) `ptr<char const>`)
                  (5 `int`)
                  `int`)
               (call (addressof (printf~0 `fn(∅: ptr<char const>, ...) -> int`) `ptr<fn(∅: ptr<char const>, ...) -> int>`)
                  (noop-type-conversion (deref (ptr-add (argv~5 `ptr<ptr<char>>`) (sign-extend (1 `int`) `unsigned long long`) `ptr<ptr<char>>`) `ptr<char>`) `ptr<char const>`)
                  (7 `int`)
                  `int`)
               `int`))
         (expression
            (logical-or
               (call (addressof (f~1 `fn() -> int`) `ptr<fn() -> int>`) `int`)
               (call (addressof (printf~0 `fn(∅: ptr<char const>, ...) -> int`) `ptr<fn(∅: ptr<char const>, ...) -> int>`)
                  (noop-type-conversion (deref (ptr-add (argv~5 `ptr<ptr<char>>`) (sign-extend (1 `int`) `unsigned long long`) `ptr<ptr<char>>`) `ptr<char>`) `ptr<char const>`)
                  (1 `int`)
                  `int`)
               `int`))
         (expression
            (logical-or
               (call (addressof (g~2 `fn() -> int`) `ptr<fn() -> int>`) `int`)
               (call (addressof (printf~0 `fn(∅: ptr<char const>, ...) -> int`) `ptr<fn(∅: ptr<char const>, ...) -> int>`)
                  (noop-type-conversion (deref (ptr-add (argv~5 `ptr<ptr<char>>`) (sign-extend (1 `int`) `unsigned long long`) `ptr<ptr<char>>`) `ptr<char>`) `ptr<char const>`)
                  (2 `int`)
                  `int`)
               `int`))))
   (function-definition
      f~1 `fn() -> int`
      (compound-statement
         (return (0 `int`))))
   (function-definition
      g~2 `fn() -> int`
      (compound-statement
         (return (2 `int`)))))

----- stderr -----
