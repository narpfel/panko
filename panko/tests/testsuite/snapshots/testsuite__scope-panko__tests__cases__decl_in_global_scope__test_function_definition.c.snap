---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=scopes"
    - "--stop-after=scopes"
    - panko/tests/cases/decl_in_global_scope/test_function_definition.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (function-definition
      a~0 `fn() -> int`
      (compound-statement
         (return 42)))
   (function-definition
      b~1 `fn(∅: int) -> int`
      (compound-statement
         (return 42)))
   (function-definition
      c~2 `fn(a: int) -> int`
      (params
         a~3 `int`)
      (compound-statement
         (return (name a~3 `int`))))
   (function-definition
      d~4 `fn(a: int) -> int`
      (params
         a~5 `int`)
      (compound-statement
         (compound-statement
            (return (name a~5 `int`)))))
   (function-definition
      e~6 `fn() -> int`
      (compound-statement
         (compound-statement)
         (expression ∅)
         (return 42)))
   (function-definition
      f~7 `fn() -> int`
      (compound-statement
         (definition a~8 `int` 42)
         (expression (name a~8 `int`))
         (return (name a~8 `int`))))
   (function-definition
      g~9 `fn() -> char`
      (compound-statement
         (definition c~10 `char` 0)
         (return (name c~10 `char`))))
   (function-definition
      h~11 `fn() -> int`
      (compound-statement
         (definition a~12 `int` 42)
         (compound-statement
            (definition a~13 `int` 27)
            (return (name a~13 `int`)))))
   (function-definition
      i~14 `fn(a: int) -> int`
      (params
         a~15 `int`)
      (compound-statement
         (compound-statement
            (definition a~16 `int` 42))
         (return (name a~15 `int`))))
   (function-definition
      j~17 `fn() -> int`
      (compound-statement
         (definition a~18 `int` 42)
         (compound-statement
            (definition a~19 `int` 27)
            (expression (name a~19 `int`)))
         (return (name a~18 `int`)))))

----- stderr -----
