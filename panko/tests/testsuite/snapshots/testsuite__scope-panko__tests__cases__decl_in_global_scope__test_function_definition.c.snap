---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=scopes"
    - "--stop-after=scopes"
    - panko/tests/cases/decl_in_global_scope/test_function_definition.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit "panko/tests/cases/decl_in_global_scope/test_function_definition.c"
   (function-definition
      a~0 `fn() -> int`
      (compound-statement
         (return 42)))
   (function-definition
      b~1 `fn(∅: int) -> int`
      (params
         b.unnamed_parameter.0~2 `int`)
      (compound-statement
         (return 42)))
   (function-definition
      c~3 `fn(a: int) -> int`
      (params
         a~4 `int`)
      (compound-statement
         (return (name a~4 `int`))))
   (function-definition
      d~5 `fn(a: int) -> int`
      (params
         a~6 `int`)
      (compound-statement
         (compound-statement
            (return (name a~6 `int`)))))
   (function-definition
      e~7 `fn() -> int`
      (compound-statement
         (compound-statement)
         (expression ∅)
         (return 42)))
   (function-definition
      f~8 `fn() -> int`
      (compound-statement
         (declaration a~9 `int` 42)
         (expression (name a~9 `int`))
         (return (name a~9 `int`))))
   (function-definition
      g~10 `fn() -> char`
      (compound-statement
         (declaration c~11 `char` 0)
         (return (name c~11 `char`))))
   (function-definition
      h~12 `fn() -> int`
      (compound-statement
         (declaration a~13 `int` 42)
         (compound-statement
            (declaration a~14 `int` 27)
            (return (name a~14 `int`)))))
   (function-definition
      i~15 `fn(a: int) -> int`
      (params
         a~16 `int`)
      (compound-statement
         (compound-statement
            (declaration a~17 `int` 42))
         (return (name a~16 `int`))))
   (function-definition
      j~18 `fn() -> int`
      (compound-statement
         (declaration a~19 `int` 42)
         (compound-statement
            (declaration a~20 `int` 27)
            (expression (name a~20 `int`)))
         (return (name a~19 `int`)))))

----- stderr -----
