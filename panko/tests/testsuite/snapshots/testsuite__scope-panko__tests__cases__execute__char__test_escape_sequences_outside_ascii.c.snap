---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=scopes"
    - "--stop-after=scopes"
    - panko/tests/cases/execute/char/test_escape_sequences_outside_ascii.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (declaration printf~0 `fn(∅: ptr<char const>, ...) -> int` ∅)
   (function-definition
      main~1 `fn() -> int`
      (compound-statement
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%d\n")
               '\xe4'))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%d\n")
               '\xff'))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%u\n")
               u8'\xe4'))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%u\n")
               u8'\xff'))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%u\n")
               u'\xe4'))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%u\n")
               u'\xff'))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%u\n")
               u'\xffff'))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%u\n")
               u'\xff'))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%u\n")
               U'\xe4'))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%u\n")
               U'\xff'))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%u\n")
               U'\xffffff'))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%u\n")
               U'\xffffffff'))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%d\n")
               L'\xe4'))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%d\n")
               L'\xff'))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%d\n")
               L'\xffffffff'))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%d\n")
               (equal U'\xffffffff' 4294967295u)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%d\n")
               (equal L'\xffffffff' (negate 1)))))))

----- stderr -----
