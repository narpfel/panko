---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=layout"
    - "--stop-after=layout"
    - panko/tests/cases/execute/string/test_array_initialised_with_string_literal.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit "panko/tests/cases/execute/string/test_array_initialised_with_string_literal.c"
   (declaration (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)) ∅)
   (declaration (puts~1 `fn(∅: ptr<char const>) -> int` (static puts)) ∅)
   (function-definition
      (main~2 `fn() -> int` (static main))
      (compound-statement
         (compound-statement
            (definition (string~3 `array<char; 7>` @0) (string `array<char; 7>` @void "string\0"))
            (expression
               (call `int` @8
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @16
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
                  (noop-type-conversion `ptr<char const>` @24
                     (noop-type-conversion `ptr<char>` @24
                        (addressof `ptr<array<char; 4>>` @24
                           (string `array<char; 4>` @void "%s\n\0"))))
                  (noop-type-conversion `ptr<char>` @32
                     (addressof `ptr<array<char; 7>>` @32
                        (string~3 `array<char; 7>` @0)))))
            (expression
               (call `int` @8
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @16
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
                  (noop-type-conversion `ptr<char const>` @24
                     (noop-type-conversion `ptr<char>` @24
                        (addressof `ptr<array<char; 5>>` @24
                           (string `array<char; 5>` @void "%zu\n\0"))))
                  (7 `unsigned long` @32))))
         (compound-statement
            (definition (string~4 `array<char; 100>` @0) (string `array<char; 7>` @void "string\0"))
            (expression
               (call `int` @100
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @104
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
                  (noop-type-conversion `ptr<char const>` @112
                     (noop-type-conversion `ptr<char>` @112
                        (addressof `ptr<array<char; 4>>` @112
                           (string `array<char; 4>` @void "%s\n\0"))))
                  (noop-type-conversion `ptr<char>` @120
                     (addressof `ptr<array<char; 100>>` @120
                        (string~4 `array<char; 100>` @0)))))
            (expression
               (call `int` @100
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @104
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
                  (noop-type-conversion `ptr<char const>` @112
                     (noop-type-conversion `ptr<char>` @112
                        (addressof `ptr<array<char; 5>>` @112
                           (string `array<char; 5>` @void "%zu\n\0"))))
                  (100 `unsigned long` @120))))
         (compound-statement
            (definition (string~5 `array<char; 7>` @0)
               (braced
                  (subobject +0 (string `array<char; 7>` @void "string\0"))))
            (expression
               (call `int` @8
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @16
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
                  (noop-type-conversion `ptr<char const>` @24
                     (noop-type-conversion `ptr<char>` @24
                        (addressof `ptr<array<char; 4>>` @24
                           (string `array<char; 4>` @void "%s\n\0"))))
                  (noop-type-conversion `ptr<char>` @32
                     (addressof `ptr<array<char; 7>>` @32
                        (string~5 `array<char; 7>` @0)))))
            (expression
               (call `int` @8
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @16
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
                  (noop-type-conversion `ptr<char const>` @24
                     (noop-type-conversion `ptr<char>` @24
                        (addressof `ptr<array<char; 5>>` @24
                           (string `array<char; 5>` @void "%zu\n\0"))))
                  (7 `unsigned long` @32))))
         (definition (strings~6 `array<array<char; 100>; 3>` @0)
            (braced
               (subobject +0 (string `array<char; 6>` @void "first\0"))
               (subobject +100 (string `array<char; 7>` @void "second\0"))
               (subobject +200 (string `array<char; 6>` @void "third\0"))))
         (expression
            (call `int` @300
               (addressof `ptr<fn(∅: ptr<char const>) -> int>` @304
                  (puts~1 `fn(∅: ptr<char const>) -> int` (static puts)))
               (noop-type-conversion `ptr<char const>` @312
                  (noop-type-conversion `ptr<char>` @312
                     (addressof `ptr<array<char; 100>>` @312
                        (deref `array<char; 100>` @312
                           (ptr-add `ptr<array<char; 100>>` @320
                              (noop-type-conversion `ptr<array<char; 100>>` @320
                                 (addressof `ptr<array<array<char; 100>; 3>>` @320
                                    (strings~6 `array<array<char; 100>; 3>` @0)))
                              (sign-extend `unsigned long` @328 (0 `int` @336)))))))))
         (expression
            (call `int` @300
               (addressof `ptr<fn(∅: ptr<char const>) -> int>` @304
                  (puts~1 `fn(∅: ptr<char const>) -> int` (static puts)))
               (noop-type-conversion `ptr<char const>` @312
                  (noop-type-conversion `ptr<char>` @312
                     (addressof `ptr<array<char; 100>>` @312
                        (deref `array<char; 100>` @312
                           (ptr-add `ptr<array<char; 100>>` @320
                              (noop-type-conversion `ptr<array<char; 100>>` @320
                                 (addressof `ptr<array<array<char; 100>; 3>>` @320
                                    (strings~6 `array<array<char; 100>; 3>` @0)))
                              (sign-extend `unsigned long` @328 (1 `int` @336)))))))))
         (expression
            (call `int` @300
               (addressof `ptr<fn(∅: ptr<char const>) -> int>` @304
                  (puts~1 `fn(∅: ptr<char const>) -> int` (static puts)))
               (noop-type-conversion `ptr<char const>` @312
                  (noop-type-conversion `ptr<char>` @312
                     (addressof `ptr<array<char; 100>>` @312
                        (deref `array<char; 100>` @312
                           (ptr-add `ptr<array<char; 100>>` @320
                              (noop-type-conversion `ptr<array<char; 100>>` @320
                                 (addressof `ptr<array<array<char; 100>; 3>>` @320
                                    (strings~6 `array<array<char; 100>; 3>` @0)))
                              (sign-extend `unsigned long` @328 (2 `int` @336)))))))))
         (compound-statement
            (definition (strings~7 `array<array<array<char; 100>; 5>; 3>` @300)
               (braced
                  (subobject +0 (string `array<char; 6>` @void "first\0"))
                  (subobject +500 (string `array<char; 7>` @void "second\0"))
                  (subobject +1000 (string `array<char; 6>` @void "third\0"))))
            (expression
               (call `int` @1800
                  (addressof `ptr<fn(∅: ptr<char const>) -> int>` @1808
                     (puts~1 `fn(∅: ptr<char const>) -> int` (static puts)))
                  (noop-type-conversion `ptr<char const>` @1816
                     (noop-type-conversion `ptr<array<char; 100>>` @1816
                        (addressof `ptr<array<array<char; 100>; 5>>` @1816
                           (deref `array<array<char; 100>; 5>` @1816
                              (ptr-add `ptr<array<array<char; 100>; 5>>` @1824
                                 (noop-type-conversion `ptr<array<array<char; 100>; 5>>` @1824
                                    (addressof `ptr<array<array<array<char; 100>; 5>; 3>>` @1824
                                       (strings~7 `array<array<array<char; 100>; 5>; 3>` @300)))
                                 (sign-extend `unsigned long` @1832 (0 `int` @1840)))))))))
            (expression
               (call `int` @1800
                  (addressof `ptr<fn(∅: ptr<char const>) -> int>` @1808
                     (puts~1 `fn(∅: ptr<char const>) -> int` (static puts)))
                  (noop-type-conversion `ptr<char const>` @1816
                     (noop-type-conversion `ptr<array<char; 100>>` @1816
                        (addressof `ptr<array<array<char; 100>; 5>>` @1816
                           (deref `array<array<char; 100>; 5>` @1816
                              (ptr-add `ptr<array<array<char; 100>; 5>>` @1824
                                 (noop-type-conversion `ptr<array<array<char; 100>; 5>>` @1824
                                    (addressof `ptr<array<array<array<char; 100>; 5>; 3>>` @1824
                                       (strings~7 `array<array<array<char; 100>; 5>; 3>` @300)))
                                 (sign-extend `unsigned long` @1832 (1 `int` @1840)))))))))
            (expression
               (call `int` @1800
                  (addressof `ptr<fn(∅: ptr<char const>) -> int>` @1808
                     (puts~1 `fn(∅: ptr<char const>) -> int` (static puts)))
                  (noop-type-conversion `ptr<char const>` @1816
                     (noop-type-conversion `ptr<array<char; 100>>` @1816
                        (addressof `ptr<array<array<char; 100>; 5>>` @1816
                           (deref `array<array<char; 100>; 5>` @1816
                              (ptr-add `ptr<array<array<char; 100>; 5>>` @1824
                                 (noop-type-conversion `ptr<array<array<char; 100>; 5>>` @1824
                                    (addressof `ptr<array<array<array<char; 100>; 5>; 3>>` @1824
                                       (strings~7 `array<array<array<char; 100>; 5>; 3>` @300)))
                                 (sign-extend `unsigned long` @1832 (2 `int` @1840))))))))))
         (return
            (truncate `int` @300
               (add `unsigned long` @304
                  (3 `unsigned long` @304)
                  (100 `unsigned long` @312)))))))

----- stderr -----
