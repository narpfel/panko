---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=typeck"
    - "--stop-after=typeck"
    - panko/tests/cases/execute/arrays/test_char_pointer_array_initialised_with_string_literals.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit "panko/tests/cases/execute/arrays/test_char_pointer_array_initialised_with_string_literals.c"
   (declaration external puts~0 `fn(∅: ptr<char const>) -> int` ∅)
   (function-definition external
      main~1 `fn() -> int`
      (compound-statement
         (definition hello_world~2 `array<ptr<char const>; 3>`
            (braced
               (subobject +0
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 6>>`
                           (string `array<char; 6>` "hello\0")))))
               (subobject +8
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 6>>`
                           (string `array<char; 6>` "world\0")))))
               (subobject +16
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 13>>`
                           (string `array<char; 13>` "or something\0")))))))
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                  (puts~0 `fn(∅: ptr<char const>) -> int`))
               (deref `ptr<char const>`
                  (ptr-add `ptr<ptr<char const>>`
                     (noop-type-conversion `ptr<ptr<char const>>`
                        (addressof `ptr<array<ptr<char const>; 3>>`
                           (hello_world~2 `array<ptr<char const>; 3>`)))
                     (sign-extend `unsigned long` (0 `int`))))))
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                  (puts~0 `fn(∅: ptr<char const>) -> int`))
               (deref `ptr<char const>`
                  (ptr-add `ptr<ptr<char const>>`
                     (noop-type-conversion `ptr<ptr<char const>>`
                        (addressof `ptr<array<ptr<char const>; 3>>`
                           (hello_world~2 `array<ptr<char const>; 3>`)))
                     (sign-extend `unsigned long` (1 `int`))))))
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                  (puts~0 `fn(∅: ptr<char const>) -> int`))
               (deref `ptr<char const>`
                  (ptr-add `ptr<ptr<char const>>`
                     (noop-type-conversion `ptr<ptr<char const>>`
                        (addressof `ptr<array<ptr<char const>; 3>>`
                           (hello_world~2 `array<ptr<char const>; 3>`)))
                     (sign-extend `unsigned long` (2 `int`)))))))))

----- stderr -----
