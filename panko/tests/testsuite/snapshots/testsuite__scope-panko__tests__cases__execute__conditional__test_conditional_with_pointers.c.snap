---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=scopes"
    - "--stop-after=scopes"
    - panko/tests/cases/execute/conditional/test_conditional_with_pointers.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit "panko/tests/cases/execute/conditional/test_conditional_with_pointers.c"
   (function-definition
      main~0 `fn() -> int`
      (compound-statement
         (declaration c_vp~1 `ptr<void const>` ∅)
         (declaration vp~2 `ptr<void>` ∅)
         (declaration c_ip~3 `ptr<int const>` ∅)
         (declaration v_ip~4 `ptr<int volatile>` ∅)
         (declaration ip~5 `ptr<int>` ∅)
         (declaration c_cp~6 `ptr<char const>` ∅)
         (expression
            (generic
               (conditional
                  0
                  (name c_vp~1 `ptr<void const>`)
                  (name c_ip~3 `ptr<int const>`))
               (assoc `ptr<void const>` 0)))
         (expression
            (generic
               (conditional
                  0
                  (name v_ip~4 `ptr<int volatile>`)
                  nullptr)
               (assoc `ptr<int volatile>` 0)))
         (expression
            (generic
               (conditional
                  0
                  (name c_ip~3 `ptr<int const>`)
                  (name v_ip~4 `ptr<int volatile>`))
               (assoc `ptr<int const volatile>` 0)))
         (expression
            (generic
               (conditional
                  0
                  (name vp~2 `ptr<void>`)
                  (name c_cp~6 `ptr<char const>`))
               (assoc `ptr<void const>` 0)))
         (expression
            (generic
               (conditional
                  0
                  (name ip~5 `ptr<int>`)
                  (name c_ip~3 `ptr<int const>`))
               (assoc `ptr<int const>` 0)))
         (expression
            (generic
               (conditional
                  0
                  (name vp~2 `ptr<void>`)
                  (name ip~5 `ptr<int>`))
               (assoc `ptr<void>` 0))))))

----- stderr -----
