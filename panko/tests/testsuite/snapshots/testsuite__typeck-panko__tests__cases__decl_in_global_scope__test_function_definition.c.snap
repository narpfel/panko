---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=typeck"
    - "--stop-after=typeck"
    - panko/tests/cases/decl_in_global_scope/test_function_definition.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit "panko/tests/cases/decl_in_global_scope/test_function_definition.c"
   (function-definition external
      a~0 `fn() -> int`
      (compound-statement
         (return (42 `int`))))
   (function-definition external
      b~1 `fn(âˆ…: int) -> int`
      (params
         b.unnamed_parameter.0~2 `int`)
      (compound-statement
         (return (42 `int`))))
   (function-definition external
      c~3 `fn(a: int) -> int`
      (params
         a~4 `int`)
      (compound-statement
         (return (a~4 `int`))))
   (function-definition external
      d~5 `fn(a: int) -> int`
      (params
         a~6 `int`)
      (compound-statement
         (compound-statement
            (return (a~6 `int`)))))
   (function-definition external
      e~7 `fn() -> int`
      (compound-statement
         (compound-statement)
         (expression âˆ…)
         (return (42 `int`))))
   (function-definition external
      f~8 `fn() -> int`
      (compound-statement
         (definition a~9 `int` (42 `int`))
         (expression (a~9 `int`))
         (return (a~9 `int`))))
   (function-definition external
      g~10 `fn() -> char`
      (compound-statement
         (definition c~11 `char` (truncate `char` (0 `int`)))
         (return (c~11 `char`))))
   (function-definition external
      h~12 `fn() -> int`
      (compound-statement
         (definition a~13 `int` (42 `int`))
         (compound-statement
            (definition a~14 `int` (27 `int`))
            (return (a~14 `int`)))))
   (function-definition external
      i~15 `fn(a: int) -> int`
      (params
         a~16 `int`)
      (compound-statement
         (compound-statement
            (definition a~17 `int` (42 `int`)))
         (return (a~16 `int`))))
   (function-definition external
      j~18 `fn() -> int`
      (compound-statement
         (definition a~19 `int` (42 `int`))
         (compound-statement
            (definition a~20 `int` (27 `int`))
            (expression (a~20 `int`)))
         (return (a~19 `int`)))))

----- stderr -----
