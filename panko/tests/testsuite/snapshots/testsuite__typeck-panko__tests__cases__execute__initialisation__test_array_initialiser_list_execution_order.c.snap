---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=typeck"
    - "--stop-after=typeck"
    - panko/tests/cases/execute/initialisation/test_array_initialiser_list_execution_order.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (declaration printf~0 `fn(∅: ptr<char const>, ...) -> int` ∅)
   (function-definition
      f~1 `fn(x: int) -> int`
      (params
         x~2 `int`)
      (compound-statement
         (definition s~3 `array<char; 4>`
            (braced
               (subobject +0 (truncate `char` (37 `int`)))
               (subobject +1 (truncate `char` (100 `int`)))
               (subobject +2 (truncate `char` (10 `int`)))
               (subobject +3 (truncate `char` (0 `int`)))))
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
               (noop-type-conversion `ptr<char const>`
                  (noop-type-conversion `ptr<char>`
                     (addressof `ptr<array<char; 4>>`
                        (s~3 `array<char; 4>`))))
               (x~2 `int`)))
         (return (x~2 `int`))))
   (function-definition
      main~4 `fn() -> int`
      (compound-statement
         (definition s~5 `array<char; 4>`
            (braced
               (subobject +0 (truncate `char` (37 `int`)))
               (subobject +1 (truncate `char` (100 `int`)))
               (subobject +2 (truncate `char` (10 `int`)))
               (subobject +3 (truncate `char` (0 `int`)))))
         (definition xs~6 `array<array<int; 2>; 2>`
            (braced
               (subobject +0
                  (call `int`
                     (addressof `ptr<fn(x: int) -> int>`
                        (f~1 `fn(x: int) -> int`))
                     (4 `int`)))
               (subobject +4
                  (call `int`
                     (addressof `ptr<fn(x: int) -> int>`
                        (f~1 `fn(x: int) -> int`))
                     (5 `int`)))
               (subobject +8
                  (call `int`
                     (addressof `ptr<fn(x: int) -> int>`
                        (f~1 `fn(x: int) -> int`))
                     (6 `int`)))
               (subobject +12
                  (call `int`
                     (addressof `ptr<fn(x: int) -> int>`
                        (f~1 `fn(x: int) -> int`))
                     (2 `int`)))))
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
               (noop-type-conversion `ptr<char const>`
                  (noop-type-conversion `ptr<char>`
                     (addressof `ptr<array<char; 4>>`
                        (s~5 `array<char; 4>`))))
               (deref `int`
                  (ptr-add `ptr<int>`
                     (noop-type-conversion `ptr<int>`
                        (addressof `ptr<array<int; 2>>`
                           (deref `array<int; 2>`
                              (ptr-add `ptr<array<int; 2>>`
                                 (noop-type-conversion `ptr<array<int; 2>>`
                                    (addressof `ptr<array<array<int; 2>; 2>>`
                                       (xs~6 `array<array<int; 2>; 2>`)))
                                 (sign-extend `unsigned long` (0 `int`))))))
                     (sign-extend `unsigned long` (0 `int`))))))
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
               (noop-type-conversion `ptr<char const>`
                  (noop-type-conversion `ptr<char>`
                     (addressof `ptr<array<char; 4>>`
                        (s~5 `array<char; 4>`))))
               (deref `int`
                  (ptr-add `ptr<int>`
                     (noop-type-conversion `ptr<int>`
                        (addressof `ptr<array<int; 2>>`
                           (deref `array<int; 2>`
                              (ptr-add `ptr<array<int; 2>>`
                                 (noop-type-conversion `ptr<array<int; 2>>`
                                    (addressof `ptr<array<array<int; 2>; 2>>`
                                       (xs~6 `array<array<int; 2>; 2>`)))
                                 (sign-extend `unsigned long` (0 `int`))))))
                     (sign-extend `unsigned long` (1 `int`))))))
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
               (noop-type-conversion `ptr<char const>`
                  (noop-type-conversion `ptr<char>`
                     (addressof `ptr<array<char; 4>>`
                        (s~5 `array<char; 4>`))))
               (deref `int`
                  (ptr-add `ptr<int>`
                     (noop-type-conversion `ptr<int>`
                        (addressof `ptr<array<int; 2>>`
                           (deref `array<int; 2>`
                              (ptr-add `ptr<array<int; 2>>`
                                 (noop-type-conversion `ptr<array<int; 2>>`
                                    (addressof `ptr<array<array<int; 2>; 2>>`
                                       (xs~6 `array<array<int; 2>; 2>`)))
                                 (sign-extend `unsigned long` (1 `int`))))))
                     (sign-extend `unsigned long` (0 `int`))))))
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
               (noop-type-conversion `ptr<char const>`
                  (noop-type-conversion `ptr<char>`
                     (addressof `ptr<array<char; 4>>`
                        (s~5 `array<char; 4>`))))
               (deref `int`
                  (ptr-add `ptr<int>`
                     (noop-type-conversion `ptr<int>`
                        (addressof `ptr<array<int; 2>>`
                           (deref `array<int; 2>`
                              (ptr-add `ptr<array<int; 2>>`
                                 (noop-type-conversion `ptr<array<int; 2>>`
                                    (addressof `ptr<array<array<int; 2>; 2>>`
                                       (xs~6 `array<array<int; 2>; 2>`)))
                                 (sign-extend `unsigned long` (1 `int`))))))
                     (sign-extend `unsigned long` (1 `int`))))))
         (definition ys~7 `array<int; 2>`
            (braced
               (subobject +0
                  (call `int`
                     (addressof `ptr<fn(x: int) -> int>`
                        (f~1 `fn(x: int) -> int`))
                     (20 `int`)))
               (subobject +4
                  (call `int`
                     (addressof `ptr<fn(x: int) -> int>`
                        (f~1 `fn(x: int) -> int`))
                     (10 `int`)))))
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
               (noop-type-conversion `ptr<char const>`
                  (noop-type-conversion `ptr<char>`
                     (addressof `ptr<array<char; 4>>`
                        (s~5 `array<char; 4>`))))
               (deref `int`
                  (ptr-add `ptr<int>`
                     (noop-type-conversion `ptr<int>`
                        (addressof `ptr<array<int; 2>>`
                           (ys~7 `array<int; 2>`)))
                     (sign-extend `unsigned long` (0 `int`))))))
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
               (noop-type-conversion `ptr<char const>`
                  (noop-type-conversion `ptr<char>`
                     (addressof `ptr<array<char; 4>>`
                        (s~5 `array<char; 4>`))))
               (deref `int`
                  (ptr-add `ptr<int>`
                     (noop-type-conversion `ptr<int>`
                        (addressof `ptr<array<int; 2>>`
                           (ys~7 `array<int; 2>`)))
                     (sign-extend `unsigned long` (1 `int`)))))))))

----- stderr -----
