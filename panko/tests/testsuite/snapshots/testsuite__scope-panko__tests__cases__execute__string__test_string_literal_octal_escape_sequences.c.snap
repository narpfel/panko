---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=scopes"
    - "--stop-after=scopes"
    - panko/tests/cases/execute/string/test_string_literal_octal_escape_sequences.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit "panko/tests/cases/execute/string/test_string_literal_octal_escape_sequences.c"
   (declaration printf~0 `fn(∅: ptr<char const>, ...) -> int` ∅)
   (declaration strcmp~1 `fn(∅: ptr<char const>, ∅: ptr<char const>) -> int` ∅)
   (function-definition
      main~2 `fn() -> int`
      (compound-statement
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%s\n")
               (string "\749")))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%s\n")
               (string "abc\123ghi")))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%d\12")
               (call (name strcmp~1 `fn(∅: ptr<char const>, ∅: ptr<char const>) -> int`)
                  (string "\12")
                  (string "\n"))))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%d\12")
               (call (name strcmp~1 `fn(∅: ptr<char const>, ∅: ptr<char const>) -> int`)
                  (string "q\12q")
                  (string "q\nq"))))
         (declaration s~3 `ptr<char const>` (string "\1" "1"))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%d%s\n")
               (subscript (name s~3 `ptr<char const>`) 0)
               (addressof (subscript (name s~3 `ptr<char const>`) 1))))
         (return (lengthof (string "\12"))))))

----- stderr -----
