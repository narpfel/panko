---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=layout"
    - "--stop-after=layout"
    - panko/tests/cases/execute/preprocessor/test_lexer_hack_applies_to_macro_expansion.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit "panko/tests/cases/execute/preprocessor/test_lexer_hack_applies_to_macro_expansion.c"
   (declaration (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)) ∅)
   (definition (x~1 `int` (static x)) (42 `int` (static x)))
   (function-definition
      (main~2 `fn() -> int` (static main))
      (compound-statement
         (compound-statement
            (typedef x `int`)
            (definition (y~3 `int` @0) (27 `int` @0))
            (expression
               (call `int` @4
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @8
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
                  (noop-type-conversion `ptr<char const>` @16
                     (noop-type-conversion `ptr<char>` @16
                        (addressof `ptr<array<char; 4>>` @16
                           (string `array<char; 4>` @void "%d\n\0"))))
                  (y~3 `int` @0))))
         (expression
            (call `int` @0
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @8
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @16
                  (noop-type-conversion `ptr<char>` @16
                     (addressof `ptr<array<char; 4>>` @16
                        (string `array<char; 4>` @void "%d\n\0"))))
               (x~1 `int` (static x)))))))

----- stderr -----
