---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=layout"
    - "--stop-after=layout"
    - panko/tests/cases/execute/preprocessor/test_object_like_macro_contains_other_macro.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit "panko/tests/cases/execute/preprocessor/test_object_like_macro_contains_other_macro.c"
   (declaration (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)) ∅)
   (function-definition
      (main~1 `fn() -> int` (static main))
      (compound-statement
         (definition (x~2 `int` @0) (42 `int` @0))
         (definition (p~3 `ptr<int>` @8)
            (addressof `ptr<int>` @8
               (x~2 `int` @0)))
         (definition (y~4 `int` @16) (27 `int` @16))
         (expression
            (call `int` @20
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @24
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @32
                  (noop-type-conversion `ptr<char>` @32
                     (addressof `ptr<array<char; 8>>` @32
                        (string `array<char; 8>` @void "*p: %d\n\0"))))
               (deref `int` @40 (p~3 `ptr<int>` @8))))
         (expression
            (call `int` @20
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @24
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @32
                  (noop-type-conversion `ptr<char>` @32
                     (addressof `ptr<array<char; 7>>` @32
                        (string `array<char; 7>` @void "x: %d\n\0"))))
               (y~4 `int` @16)))
         (expression
            (call `int` @20
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @24
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @32
                  (noop-type-conversion `ptr<char>` @32
                     (addressof `ptr<array<char; 7>>` @32
                        (string `array<char; 7>` @void "y: %d\n\0"))))
               (y~4 `int` @16)))
         (return (y~4 `int` @16)))))

----- stderr -----
