---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=scopes"
    - "--stop-after=scopes"
    - panko/tests/cases/execute/initialisation/test_complex_expressions_in_braced_initialisers.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (declaration printf~0 `fn(∅: ptr<char const>, ...) -> int` ∅)
   (function-definition
      fib~1 `fn(n: int) -> int`
      (params
         n~2 `int`)
      (compound-statement
         (return
            (conditional
               (less (name n~2 `int`) 3)
               1
               (add
                  (call (name fib~1 `fn(n: int) -> int`)
                     (subtract (name n~2 `int`) 1))
                  (call (name fib~1 `fn(n: int) -> int`)
                     (subtract (name n~2 `int`) 2)))))))
   (function-definition
      main~3 `fn(∅: int, argv: ptr<ptr<char>>) -> int`
      (params
         main.unnamed_parameter.0~4 `int`
         argv~5 `ptr<ptr<char>>`)
      (compound-statement
         (definition x~6 `int`
            (braced
               42))
         (definition y~7 `int`
            (braced
               (name x~6 `int`)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (subscript (name argv~5 `ptr<ptr<char>>`) 1)
               (name y~7 `int`)))
         (definition z~8 `int`
            (braced
               (negate (name x~6 `int`))))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (subscript (name argv~5 `ptr<ptr<char>>`) 1)
               (name z~8 `int`)))
         (definition xs~9 `array<int; 2>`
            (braced
               (name x~6 `int`)
               (braced
                  (name z~8 `int`))))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (subscript (name argv~5 `ptr<ptr<char>>`) 1)
               (subscript (name xs~9 `array<int; 2>`) 0)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (subscript (name argv~5 `ptr<ptr<char>>`) 1)
               (subscript (name xs~9 `array<int; 2>`) 1)))
         (definition two~10 `int` 2)
         (definition ys~11 `array<int; 3>`
            (braced
               (name two~10 `int`)
               (call (name fib~1 `fn(n: int) -> int`)
                  (name two~10 `int`))
               (subtract
                  (call (name fib~1 `fn(n: int) -> int`)
                     (add (add (name two~10 `int`) (name two~10 `int`)) (name two~10 `int`)))
                  (name two~10 `int`))))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (subscript (name argv~5 `ptr<ptr<char>>`) 1)
               (subscript (name ys~11 `array<int; 3>`) 0)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (subscript (name argv~5 `ptr<ptr<char>>`) 1)
               (subscript (name ys~11 `array<int; 3>`) 1)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (subscript (name argv~5 `ptr<ptr<char>>`) 1)
               (subscript (name ys~11 `array<int; 3>`) 2))))))

----- stderr -----
