---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=layout"
    - "--stop-after=layout"
    - panko/tests/cases/execute/preprocessor/test_paste_simple.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (declaration (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)) ∅)
   (function-definition
      (main~1 `fn() -> int` (static main))
      (compound-statement
         (definition (variable~2 `int` @0) (42 `int` @0))
         (expression
            (call `int` @4
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @8
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @16
                  (noop-type-conversion `ptr<char>` @16
                     (addressof `ptr<array<char; 4>>` @16
                        (string `array<char; 4>` @void "%d\n\0"))))
               (variable~2 `int` @0)))
         (expression
            (call `int` @4
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @8
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @16
                  (noop-type-conversion `ptr<char>` @16
                     (addressof `ptr<array<char; 4>>` @16
                        (string `array<char; 4>` @void "%d\n\0"))))
               (negate `int` @24 (variable~2 `int` @0))))
         (expression
            (call `int` @4
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @8
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @16
                  (noop-type-conversion `ptr<char>` @16
                     (addressof `ptr<array<char; 4>>` @16
                        (string `array<char; 4>` @void "%d\n\0"))))
               (negate `int` @24 (variable~2 `int` @0))))
         (expression
            (call `int` @4
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>` @8
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int` (static printf)))
               (noop-type-conversion `ptr<char const>` @16
                  (noop-type-conversion `ptr<char>` @16
                     (addressof `ptr<array<char; 4>>` @16
                        (string `array<char; 4>` @void "%d\n\0"))))
               (combine `int` @24
                  (assign `ptr<int>` @32
                     (unnamed-temporary~3 `ptr<int>` @32)
                     (addressof `ptr<int>` @32
                        (variable~2 `int` @0)))
                  (assign `int` @24
                     (deref `int` @24 (unnamed-temporary~3 `ptr<int>` @32))
                     (add `int` @40
                        (deref `int` @40 (unnamed-temporary~3 `ptr<int>` @32))
                        (1 `int` @48))))))
         (return
            (add `int` @4
               (variable~2 `int` @0)
               (2 `int` @8))))))

----- stderr -----
