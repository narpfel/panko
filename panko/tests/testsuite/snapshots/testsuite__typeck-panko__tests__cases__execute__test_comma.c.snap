---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=typeck"
    - "--stop-after=typeck"
    - panko/tests/cases/execute/test_comma.c
snapshot_kind: text
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (declaration printf~0 `fn(∅: ptr<char const>, ...) -> int` ∅)
   (function-definition
      main~1 `fn(∅: int, argv: ptr<ptr<char>>) -> int`
      (params
         main.unnamed_parameter.0~2 `int`
         argv~3 `ptr<ptr<char>>`)
      (compound-statement
         (expression
            (combine
               (call (addressof (printf~0 `fn(∅: ptr<char const>, ...) -> int`) `ptr<fn(∅: ptr<char const>, ...) -> int>`)
                  (noop-type-conversion (deref (ptr-add (argv~3 `ptr<ptr<char>>`) (sign-extend (1 `int`) `unsigned long`) `ptr<ptr<char>>`) `ptr<char>`) `ptr<char const>`)
                  (42 `int`)
                  `int`)
               (call (addressof (printf~0 `fn(∅: ptr<char const>, ...) -> int`) `ptr<fn(∅: ptr<char const>, ...) -> int>`)
                  (noop-type-conversion (deref (ptr-add (argv~3 `ptr<ptr<char>>`) (sign-extend (1 `int`) `unsigned long`) `ptr<ptr<char>>`) `ptr<char>`) `ptr<char const>`)
                  (27 `int`)
                  `int`)
               `int`))
         (expression
            (combine
               (0 `int`)
               (call (addressof (printf~0 `fn(∅: ptr<char const>, ...) -> int`) `ptr<fn(∅: ptr<char const>, ...) -> int>`)
                  (noop-type-conversion (deref (ptr-add (argv~3 `ptr<ptr<char>>`) (sign-extend (1 `int`) `unsigned long`) `ptr<ptr<char>>`) `ptr<char>`) `ptr<char const>`)
                  (123 `int`)
                  `int`)
               `int`))
         (expression
            (call (addressof (printf~0 `fn(∅: ptr<char const>, ...) -> int`) `ptr<fn(∅: ptr<char const>, ...) -> int>`)
               (noop-type-conversion (deref (ptr-add (argv~3 `ptr<ptr<char>>`) (sign-extend (1 `int`) `unsigned long`) `ptr<ptr<char>>`) `ptr<char>`) `ptr<char const>`)
               (combine
                  (combine
                     (combine
                        (0 `int`)
                        (42 `int`)
                        `int`
                        `int`)
                     (1 `int`)
                     `int`)
                  (combine
                     (2 `int`)
                     (3 `int`)
                     `int`
                     `int`)
                  `int`
                  `int`)
               `int`))
         (return
            (combine
               (combine
                  (0 `int`)
                  (1 `int`)
                  `int`)
               (2 `int`)
               `int`)))))

----- stderr -----
