---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=typeck"
    - "--stop-after=typeck"
    - panko/tests/cases/execute/arrays/test_array_as_function_parameter.c
snapshot_kind: text
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (function-definition
      f~0 `fn(xs: ptr<int>) -> int`
      (params
         xs~1 `ptr<int>`)
      (compound-statement
         (return (add (deref (ptr-add (xs~1 `ptr<int>`) (sign-extend (0 `int`) `unsigned long`) `ptr<int>`) `int`) (deref (ptr-add (xs~1 `ptr<int>`) (sign-extend (1 `int`) `unsigned long`) `ptr<int>`) `int`) `int`))))
   (function-definition
      main~2 `fn() -> int`
      (compound-statement
         (definition xs~3 `array<int; (constexpr 2)>` âˆ…)
         (expression (assign (deref (ptr-add (noop-type-conversion (addressof (xs~3 `array<int; (constexpr 2)>`) `ptr<array<int; (constexpr 2)>>`) `ptr<int>`) (sign-extend (0 `int`) `unsigned long`) `ptr<int>`) `int`) (4 `int`) `int`))
         (expression (assign (deref (ptr-add (noop-type-conversion (addressof (xs~3 `array<int; (constexpr 2)>`) `ptr<array<int; (constexpr 2)>>`) `ptr<int>`) (sign-extend (1 `int`) `unsigned long`) `ptr<int>`) `int`) (6 `int`) `int`))
         (return
            (call (addressof (f~0 `fn(xs: ptr<int>) -> int`) `ptr<fn(xs: ptr<int>) -> int>`)
               (noop-type-conversion (addressof (xs~3 `array<int; (constexpr 2)>`) `ptr<array<int; (constexpr 2)>>`) `ptr<int>`)
               `int`)))))

----- stderr -----
