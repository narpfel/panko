---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=typeck"
    - "--stop-after=typeck"
    - panko/tests/cases/execute/nullptr/test_nullptr_to_ptr_conversion.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (declaration printf~0 `fn(∅: ptr<char const>, ...) -> int` ∅)
   (declaration puts~1 `fn(∅: ptr<char const>) -> int` ∅)
   (function-definition
      main~2 `fn() -> int`
      (compound-statement
         (definition p~3 `ptr<int>` (noop-type-conversion `ptr<int>` (nullptr `nullptr_t`)))
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
               (noop-type-conversion `ptr<char const>`
                  (noop-type-conversion `ptr<char>`
                     (addressof `ptr<array<char; 4>>`
                        (string `array<char; 4>` "%p\n\0"))))
               (noop-type-conversion `ptr<void>` (p~3 `ptr<int>`))))
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                  (puts~1 `fn(∅: ptr<char const>) -> int`))
               (noop-type-conversion `ptr<char const>`
                  (conditional `ptr<char>`
                     (p~3 `ptr<int>`)
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 7>>`
                           (string `array<char; 7>` "truthy\0")))
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 6>>`
                           (string `array<char; 6>` "falsy\0")))))))
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                  (puts~1 `fn(∅: ptr<char const>) -> int`))
               (noop-type-conversion `ptr<char const>`
                  (conditional `ptr<char>`
                     (addressof `ptr<ptr<int>>`
                        (p~3 `ptr<int>`))
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 7>>`
                           (string `array<char; 7>` "truthy\0")))
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 6>>`
                           (string `array<char; 6>` "falsy\0")))))))
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                  (puts~1 `fn(∅: ptr<char const>) -> int`))
               (noop-type-conversion `ptr<char const>`
                  (conditional `ptr<char>`
                     (nullptr `nullptr_t`)
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 8>>`
                           (string `array<char; 8>` "someptr\0")))
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 8>>`
                           (string `array<char; 8>` "nullptr\0")))))))
         (return (truncate `int` (noop-type-conversion `unsigned long` (noop-type-conversion `ptr<int>` (nullptr `nullptr_t`))))))))

----- stderr -----
