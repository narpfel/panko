---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=scopes"
    - "--stop-after=scopes"
    - panko/tests/cases/execute/arithmetic/test_sizeof.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit "panko/tests/cases/execute/arithmetic/test_sizeof.c"
   (declaration printf~0 `fn(∅: ptr<char const>, ...) -> int` ∅)
   (declaration calloc~1 `fn(∅: unsigned long, ∅: unsigned long) -> ptr<void>` ∅)
   (function-definition
      main~2 `fn(∅: int, argv: ptr<ptr<char>>) -> int`
      (params
         main.unnamed_parameter.0~3 `int`
         argv~4 `ptr<ptr<char>>`)
      (compound-statement
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (deref (add (name argv~4 `ptr<ptr<char>>`) 1))
               (sizeof `char`)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (deref (add (name argv~4 `ptr<ptr<char>>`) 1))
               (sizeof `char const`)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (deref (add (name argv~4 `ptr<ptr<char>>`) 1))
               (sizeof `ptr<char const>`)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (deref (add (name argv~4 `ptr<ptr<char>>`) 1))
               (sizeof `ptr<char>`)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (deref (add (name argv~4 `ptr<ptr<char>>`) 1))
               (sizeof `ptr<fn(∅: int, ∅: int) -> void>`)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (deref (add (name argv~4 `ptr<ptr<char>>`) 1))
               (sizeof `unsigned short`)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (deref (add (name argv~4 `ptr<ptr<char>>`) 1))
               (sizeof `int`)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (deref (add (name argv~4 `ptr<ptr<char>>`) 1))
               (sizeof `long`)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (deref (add (name argv~4 `ptr<ptr<char>>`) 1))
               (sizeof `long long`)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (deref (add (name argv~4 `ptr<ptr<char>>`) 1))
               (sizeof `ptr<void>`)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (deref (add (name argv~4 `ptr<ptr<char>>`) 1))
               (sizeof 42)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (deref (add (name argv~4 `ptr<ptr<char>>`) 1))
               (sizeof 42u)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (deref (add (name argv~4 `ptr<ptr<char>>`) 1))
               (sizeof 42l)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (deref (add (name argv~4 `ptr<ptr<char>>`) 1))
               (sizeof (sizeof 42))))
         (expression
            (generic
               (sizeof `int`)
               (assoc `unsigned long` 0)))
         (expression
            (generic
               (sizeof 42)
               (assoc `unsigned long` 0)))
         (declaration p~5 `ptr<int>`
            (call (name calloc~1 `fn(∅: unsigned long, ∅: unsigned long) -> ptr<void>`)
               1
               (sizeof (deref (name p~5 `ptr<int>`)))))
         (return (add (deref (name p~5 `ptr<int>`)) (sizeof (addressof (name calloc~1 `fn(∅: unsigned long, ∅: unsigned long) -> ptr<void>`))))))))

----- stderr -----
