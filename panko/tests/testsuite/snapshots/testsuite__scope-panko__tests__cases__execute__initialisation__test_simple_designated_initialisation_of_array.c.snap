---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=scopes"
    - "--stop-after=scopes"
    - panko/tests/cases/execute/initialisation/test_simple_designated_initialisation_of_array.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (declaration printf~0 `fn(∅: ptr<char const>, ...) -> int` ∅)
   (function-definition
      f~1 `fn(x: int) -> int`
      (params
         x~2 `int`)
      (compound-statement
         (definition s~3 `array<char const; ∅>`
            (braced
               37
               100
               10
               0))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (name s~3 `array<char const; ∅>`)
               (name x~2 `int`)))
         (return (name x~2 `int`))))
   (function-definition
      main~4 `fn(∅: int, argv: ptr<ptr<char>>) -> int`
      (params
         main.unnamed_parameter.0~5 `int`
         argv~6 `ptr<ptr<char>>`)
      (compound-statement
         (definition xs~7 `array<int; ∅>`
            (braced
               (designation ((index 0))
                  (call (name f~1 `fn(x: int) -> int`)
                     1))
               (designation ((index 42))
                  (call (name f~1 `fn(x: int) -> int`)
                     2))
               (designation ((index 27))
                  (call (name f~1 `fn(x: int) -> int`)
                     3))
               (call (name f~1 `fn(x: int) -> int`)
                  4)
               (call (name f~1 `fn(x: int) -> int`)
                  5)
               (designation ((index 0))
                  (call (name f~1 `fn(x: int) -> int`)
                     42))))
         (definition s~8 `ptr<char const>` (subscript (name argv~6 `ptr<ptr<char>>`) 1))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (name s~8 `ptr<char const>`)
               (subscript (name xs~7 `array<int; ∅>`) 0)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (name s~8 `ptr<char const>`)
               (subscript (name xs~7 `array<int; ∅>`) 1)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (name s~8 `ptr<char const>`)
               (subscript (name xs~7 `array<int; ∅>`) 26)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (name s~8 `ptr<char const>`)
               (subscript (name xs~7 `array<int; ∅>`) 27)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (name s~8 `ptr<char const>`)
               (subscript (name xs~7 `array<int; ∅>`) 28)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (name s~8 `ptr<char const>`)
               (subscript (name xs~7 `array<int; ∅>`) 29)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (name s~8 `ptr<char const>`)
               (subscript (name xs~7 `array<int; ∅>`) 30)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (name s~8 `ptr<char const>`)
               (subscript (name xs~7 `array<int; ∅>`) 41)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (name s~8 `ptr<char const>`)
               (subscript (name xs~7 `array<int; ∅>`) 42))))))

----- stderr -----
