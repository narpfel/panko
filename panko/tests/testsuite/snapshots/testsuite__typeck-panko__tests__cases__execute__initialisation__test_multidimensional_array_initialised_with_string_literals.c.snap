---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=typeck"
    - "--stop-after=typeck"
    - panko/tests/cases/execute/initialisation/test_multidimensional_array_initialised_with_string_literals.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit "panko/tests/cases/execute/initialisation/test_multidimensional_array_initialised_with_string_literals.c"
   (declaration printf~0 `fn(∅: ptr<char const>, ...) -> int` ∅)
   (declaration puts~1 `fn(∅: ptr<char const>) -> int` ∅)
   (function-definition
      main~2 `fn() -> int`
      (compound-statement
         (compound-statement
            (definition strings~3 `array<array<array<char; 100>; 2>; 3>`
               (braced
                  (subobject +0 (string `array<char; 6>` "first\0"))
                  (subobject +100 (string `array<char; 11>` "also first\0"))
                  (subobject +200 (string `array<char; 7>` "second\0"))
                  (subobject +400 (string `array<char; 6>` "third\0"))
                  (subobject +500 (string `array<char; 11>` "also third\0"))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                     (puts~1 `fn(∅: ptr<char const>) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 100>>`
                           (deref `array<char; 100>`
                              (ptr-add `ptr<array<char; 100>>`
                                 (noop-type-conversion `ptr<array<char; 100>>`
                                    (addressof `ptr<array<array<char; 100>; 2>>`
                                       (deref `array<array<char; 100>; 2>`
                                          (ptr-add `ptr<array<array<char; 100>; 2>>`
                                             (noop-type-conversion `ptr<array<array<char; 100>; 2>>`
                                                (addressof `ptr<array<array<array<char; 100>; 2>; 3>>`
                                                   (strings~3 `array<array<array<char; 100>; 2>; 3>`)))
                                             (sign-extend `unsigned long` (0 `int`))))))
                                 (sign-extend `unsigned long` (0 `int`)))))))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                     (puts~1 `fn(∅: ptr<char const>) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 100>>`
                           (deref `array<char; 100>`
                              (ptr-add `ptr<array<char; 100>>`
                                 (noop-type-conversion `ptr<array<char; 100>>`
                                    (addressof `ptr<array<array<char; 100>; 2>>`
                                       (deref `array<array<char; 100>; 2>`
                                          (ptr-add `ptr<array<array<char; 100>; 2>>`
                                             (noop-type-conversion `ptr<array<array<char; 100>; 2>>`
                                                (addressof `ptr<array<array<array<char; 100>; 2>; 3>>`
                                                   (strings~3 `array<array<array<char; 100>; 2>; 3>`)))
                                             (sign-extend `unsigned long` (0 `int`))))))
                                 (sign-extend `unsigned long` (1 `int`)))))))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                     (puts~1 `fn(∅: ptr<char const>) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 100>>`
                           (deref `array<char; 100>`
                              (ptr-add `ptr<array<char; 100>>`
                                 (noop-type-conversion `ptr<array<char; 100>>`
                                    (addressof `ptr<array<array<char; 100>; 2>>`
                                       (deref `array<array<char; 100>; 2>`
                                          (ptr-add `ptr<array<array<char; 100>; 2>>`
                                             (noop-type-conversion `ptr<array<array<char; 100>; 2>>`
                                                (addressof `ptr<array<array<array<char; 100>; 2>; 3>>`
                                                   (strings~3 `array<array<array<char; 100>; 2>; 3>`)))
                                             (sign-extend `unsigned long` (1 `int`))))))
                                 (sign-extend `unsigned long` (0 `int`)))))))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                     (puts~1 `fn(∅: ptr<char const>) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 100>>`
                           (deref `array<char; 100>`
                              (ptr-add `ptr<array<char; 100>>`
                                 (noop-type-conversion `ptr<array<char; 100>>`
                                    (addressof `ptr<array<array<char; 100>; 2>>`
                                       (deref `array<array<char; 100>; 2>`
                                          (ptr-add `ptr<array<array<char; 100>; 2>>`
                                             (noop-type-conversion `ptr<array<array<char; 100>; 2>>`
                                                (addressof `ptr<array<array<array<char; 100>; 2>; 3>>`
                                                   (strings~3 `array<array<array<char; 100>; 2>; 3>`)))
                                             (sign-extend `unsigned long` (1 `int`))))))
                                 (sign-extend `unsigned long` (1 `int`)))))))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                     (puts~1 `fn(∅: ptr<char const>) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 100>>`
                           (deref `array<char; 100>`
                              (ptr-add `ptr<array<char; 100>>`
                                 (noop-type-conversion `ptr<array<char; 100>>`
                                    (addressof `ptr<array<array<char; 100>; 2>>`
                                       (deref `array<array<char; 100>; 2>`
                                          (ptr-add `ptr<array<array<char; 100>; 2>>`
                                             (noop-type-conversion `ptr<array<array<char; 100>; 2>>`
                                                (addressof `ptr<array<array<array<char; 100>; 2>; 3>>`
                                                   (strings~3 `array<array<array<char; 100>; 2>; 3>`)))
                                             (sign-extend `unsigned long` (2 `int`))))))
                                 (sign-extend `unsigned long` (0 `int`)))))))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                     (puts~1 `fn(∅: ptr<char const>) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 100>>`
                           (deref `array<char; 100>`
                              (ptr-add `ptr<array<char; 100>>`
                                 (noop-type-conversion `ptr<array<char; 100>>`
                                    (addressof `ptr<array<array<char; 100>; 2>>`
                                       (deref `array<array<char; 100>; 2>`
                                          (ptr-add `ptr<array<array<char; 100>; 2>>`
                                             (noop-type-conversion `ptr<array<array<char; 100>; 2>>`
                                                (addressof `ptr<array<array<array<char; 100>; 2>; 3>>`
                                                   (strings~3 `array<array<array<char; 100>; 2>; 3>`)))
                                             (sign-extend `unsigned long` (2 `int`))))))
                                 (sign-extend `unsigned long` (1 `int`)))))))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 13>>`
                           (string `array<char; 13>` "%zu %zu %zu\n\0"))))
                  (lengthof `unsigned long` 3 (strings~3 `array<array<array<char; 100>; 2>; 3>`))
                  (lengthof `unsigned long` 2
                     (deref `array<array<char; 100>; 2>`
                        (ptr-add `ptr<array<array<char; 100>; 2>>`
                           (noop-type-conversion `ptr<array<array<char; 100>; 2>>`
                              (addressof `ptr<array<array<array<char; 100>; 2>; 3>>`
                                 (strings~3 `array<array<array<char; 100>; 2>; 3>`)))
                           (sign-extend `unsigned long` (0 `int`)))))
                  (lengthof `unsigned long` 100
                     (deref `array<char; 100>`
                        (ptr-add `ptr<array<char; 100>>`
                           (noop-type-conversion `ptr<array<char; 100>>`
                              (addressof `ptr<array<array<char; 100>; 2>>`
                                 (deref `array<array<char; 100>; 2>`
                                    (ptr-add `ptr<array<array<char; 100>; 2>>`
                                       (noop-type-conversion `ptr<array<array<char; 100>; 2>>`
                                          (addressof `ptr<array<array<array<char; 100>; 2>; 3>>`
                                             (strings~3 `array<array<array<char; 100>; 2>; 3>`)))
                                       (sign-extend `unsigned long` (0 `int`))))))
                           (sign-extend `unsigned long` (0 `int`))))))))
         (compound-statement
            (definition strings~4 `array<array<char; 100>; 2>`
               (braced
                  (subobject +0 (string `array<char; 7>` "string\0"))
                  (subobject +100 (string `array<char; 15>` "another string\0"))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 5>>`
                           (string `array<char; 5>` "%zu\n\0"))))
                  (lengthof `unsigned long` 2 (strings~4 `array<array<char; 100>; 2>`))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                     (puts~1 `fn(∅: ptr<char const>) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 100>>`
                           (deref `array<char; 100>`
                              (ptr-add `ptr<array<char; 100>>`
                                 (noop-type-conversion `ptr<array<char; 100>>`
                                    (addressof `ptr<array<array<char; 100>; 2>>`
                                       (strings~4 `array<array<char; 100>; 2>`)))
                                 (sign-extend `unsigned long` (0 `int`)))))))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>) -> int>`
                     (puts~1 `fn(∅: ptr<char const>) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 100>>`
                           (deref `array<char; 100>`
                              (ptr-add `ptr<array<char; 100>>`
                                 (noop-type-conversion `ptr<array<char; 100>>`
                                    (addressof `ptr<array<array<char; 100>; 2>>`
                                       (strings~4 `array<array<char; 100>; 2>`)))
                                 (sign-extend `unsigned long` (1 `int`)))))))))))))

----- stderr -----
