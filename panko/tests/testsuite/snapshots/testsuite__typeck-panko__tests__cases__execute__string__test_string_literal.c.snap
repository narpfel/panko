---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=typeck"
    - "--stop-after=typeck"
    - panko/tests/cases/execute/string/test_string_literal.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (declaration puts~0 `fn(∅: ptr<char const>) -> int` ∅)
   (function-definition
      main~1 `fn() -> int`
      (compound-statement
         (expression
            (noop-type-conversion
               (addressof
                  (string "ignored string\0" `array<char; (constexpr 15)>`)
                  `ptr<array<char; (constexpr 15)>>`)
               `ptr<char>`))
         (expression
            (call
               (addressof
                  (puts~0 `fn(∅: ptr<char const>) -> int`)
                  `ptr<fn(∅: ptr<char const>) -> int>`)
               (noop-type-conversion
                  (noop-type-conversion
                     (addressof
                        (string "some string concatenated\0" `array<char; (constexpr 25)>`)
                        `ptr<array<char; (constexpr 25)>>`)
                     `ptr<char>`)
                  `ptr<char const>`)
               `int`))
         (definition char_star~2 `ptr<char>`
            (noop-type-conversion
               (addressof
                  (string "char star\0" `array<char; (constexpr 10)>`)
                  `ptr<array<char; (constexpr 10)>>`)
               `ptr<char>`))
         (expression
            (call
               (addressof
                  (puts~0 `fn(∅: ptr<char const>) -> int`)
                  `ptr<fn(∅: ptr<char const>) -> int>`)
               (noop-type-conversion (char_star~2 `ptr<char>`) `ptr<char const>`)
               `int`))
         (definition char_const_star~3 `ptr<char const>`
            (noop-type-conversion
               (noop-type-conversion
                  (addressof
                     (string "char const star\0" `array<char; (constexpr 16)>`)
                     `ptr<array<char; (constexpr 16)>>`)
                  `ptr<char>`)
               `ptr<char const>`))
         (expression
            (call
               (addressof
                  (puts~0 `fn(∅: ptr<char const>) -> int`)
                  `ptr<fn(∅: ptr<char const>) -> int>`)
               (char_const_star~3 `ptr<char const>`)
               `int`))
         (return (truncate (lengthof 7 (string "string\0" `array<char; (constexpr 7)>`) `unsigned long`) `int`)))))

----- stderr -----
