---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=scopes"
    - "--stop-after=scopes"
    - panko/tests/cases/execute/initialisation/test_deduce_array_length_from_braced_init.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (declaration printf~0 `fn(∅: ptr<char const>, ...) -> int` ∅)
   (function-definition
      main~1 `fn() -> int`
      (compound-statement
         (definition array~2 `array<array<int; 3>; ∅>`
            (braced
               (braced
                  1)
               2
               3))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%d\n")
               (subscript (subscript (name array~2 `array<array<int; 3>; ∅>`) 0) 0)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%d\n")
               (subscript (subscript (name array~2 `array<array<int; 3>; ∅>`) 0) 1)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%d\n")
               (subscript (subscript (name array~2 `array<array<int; 3>; ∅>`) 0) 2)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%d\n")
               (subscript (subscript (name array~2 `array<array<int; 3>; ∅>`) 1) 0)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%d\n")
               (subscript (subscript (name array~2 `array<array<int; 3>; ∅>`) 1) 1)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%d\n")
               (subscript (subscript (name array~2 `array<array<int; 3>; ∅>`) 1) 2)))
         (expression
            (call (name printf~0 `fn(∅: ptr<char const>, ...) -> int`)
               (string "%zu %zu\n")
               (lengthof (name array~2 `array<array<int; 3>; ∅>`))
               (lengthof (subscript (name array~2 `array<array<int; 3>; ∅>`) 0)))))))

----- stderr -----
