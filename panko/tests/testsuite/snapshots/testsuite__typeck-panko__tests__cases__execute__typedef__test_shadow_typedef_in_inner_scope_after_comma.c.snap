---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=typeck"
    - "--stop-after=typeck"
    - panko/tests/cases/execute/typedef/test_shadow_typedef_in_inner_scope_after_comma.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (declaration printf~0 `fn(∅: ptr<char const>, ...) -> int` ∅)
   (typedef name `int`)
   (typedef ptr `int`)
   (typedef fptr `int`)
   (typedef xs `int`)
   (function-definition
      main~1 `fn() -> int`
      (compound-statement
         (typedef function `int`)
         (compound-statement
            (definition a~2 `int` ∅)
            (definition name~3 `int` (42 `int`))
            (definition b~4 `int` ∅)
            (definition ptr~5 `ptr<int>`
               (addressof `ptr<int>`
                  (name~3 `int`)))
            (definition c~6 `int` ∅)
            (declaration function~7 `fn(∅: int) -> int` ∅)
            (definition d~8 `int` ∅)
            (definition fptr~9 `ptr<fn(∅: int) -> int>`
               (addressof `ptr<fn(∅: int) -> int>`
                  (function~7 `fn(∅: int) -> int`)))
            (definition e~10 `int` ∅)
            (definition xs~11 `array<int; 5>`
               (braced
                  (subobject +0 (123 `int`))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 4>>`
                           (string `array<char; 4>` "%d\n\0"))))
                  (name~3 `int`)))
            (expression
               (combine `int`
                  (assign `ptr<int>` (unnamed-temporary~12 `ptr<int>`)
                     (addressof `ptr<int>`
                        (name~3 `int`)))
                  (assign `int` (deref `int` (unnamed-temporary~12 `ptr<int>`)) (add `int` (deref `int` (unnamed-temporary~12 `ptr<int>`)) (++ `int`)))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 4>>`
                           (string `array<char; 4>` "%d\n\0"))))
                  (deref `int` (ptr~5 `ptr<int>`))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 4>>`
                           (string `array<char; 4>` "%d\n\0"))))
                  (call `int`
                     (addressof `ptr<fn(∅: int) -> int>`
                        (function~7 `fn(∅: int) -> int`))
                     (27 `int`))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 4>>`
                           (string `array<char; 4>` "%d\n\0"))))
                  (call `int` (fptr~9 `ptr<fn(∅: int) -> int>`)
                     (5 `int`))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 4>>`
                           (string `array<char; 4>` "%d\n\0"))))
                  (deref `int`
                     (ptr-add `ptr<int>`
                        (noop-type-conversion `ptr<int>`
                           (addressof `ptr<array<int; 5>>`
                              (xs~11 `array<int; 5>`)))
                        (sign-extend `unsigned long` (0 `int`)))))))))
   (function-definition
      function~13 `fn(value: int) -> int`
      (params
         value~14 `int`)
      (compound-statement
         (expression
            (call `int`
               (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                  (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
               (noop-type-conversion `ptr<char const>`
                  (noop-type-conversion `ptr<char>`
                     (addressof `ptr<array<char; 13>>`
                        (string `array<char; 13>` "function %d\n\0"))))
               (value~14 `int`)))
         (return (add `int` (value~14 `int`) (1 `int`))))))

----- stderr -----
