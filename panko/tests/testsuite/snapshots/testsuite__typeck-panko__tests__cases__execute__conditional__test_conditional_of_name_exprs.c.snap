---
source: panko/tests/testsuite/main.rs
info:
  program: panko
  args:
    - "--print=typeck"
    - "--stop-after=typeck"
    - panko/tests/cases/execute/conditional/test_conditional_of_name_exprs.c
---
success: true
exit_code: 0
----- stdout -----
(translation-unit
   (declaration printf~0 `fn(∅: ptr<char const>, ...) -> int` ∅)
   (function-definition
      main~1 `fn() -> int`
      (compound-statement
         (compound-statement
            (definition x~2 `int` (42 `int`))
            (definition y~3 `int` (27 `int`))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 4>>`
                           (string `array<char; 4>` "%d\n\0"))))
                  (conditional `int`
                     (0 `int`)
                     (x~2 `int`)
                     (y~3 `int`))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 4>>`
                           (string `array<char; 4>` "%d\n\0"))))
                  (conditional `int`
                     (1 `int`)
                     (x~2 `int`)
                     (y~3 `int`)))))
         (compound-statement
            (definition x~4 `short` (truncate `short` (42 `int`)))
            (definition y~5 `short` (truncate `short` (27 `int`)))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 4>>`
                           (string `array<char; 4>` "%d\n\0"))))
                  (conditional `int`
                     (0 `int`)
                     (sign-extend `int` (x~4 `short`))
                     (sign-extend `int` (y~5 `short`)))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 4>>`
                           (string `array<char; 4>` "%d\n\0"))))
                  (conditional `int`
                     (1 `int`)
                     (sign-extend `int` (x~4 `short`))
                     (sign-extend `int` (y~5 `short`))))))
         (compound-statement
            (definition x~6 `long` (sign-extend `long` (42 `int`)))
            (definition y~7 `long` (sign-extend `long` (27 `int`)))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 5>>`
                           (string `array<char; 5>` "%ld\n\0"))))
                  (conditional `long`
                     (0 `int`)
                     (x~6 `long`)
                     (y~7 `long`))))
            (expression
               (call `int`
                  (addressof `ptr<fn(∅: ptr<char const>, ...) -> int>`
                     (printf~0 `fn(∅: ptr<char const>, ...) -> int`))
                  (noop-type-conversion `ptr<char const>`
                     (noop-type-conversion `ptr<char>`
                        (addressof `ptr<array<char; 5>>`
                           (string `array<char; 5>` "%ld\n\0"))))
                  (conditional `long`
                     (1 `int`)
                     (x~6 `long`)
                     (y~7 `long`))))))))

----- stderr -----
