use std::cell::Cell;
use std::cell::RefCell;

use panko_lex::Token;
use panko_lex::TokenKind;
use panko_lex::TypedefNames;

use crate as ast;
use crate::ast::Session;

grammar<'a, 'b>(
    sess: &'a Session<'a>,
    typedef_names: &'b RefCell<TypedefNames<'a>>,
    is_in_typedef: &'b Cell<bool>,
);

extern {
    type Error = &'a ast::Error<'a>;

    enum Token<'a> {
        ";" => Token { kind: TokenKind::Semicolon, .. },
        "," => Token { kind: TokenKind::Comma, .. },
        "=" => Token { kind: TokenKind::Equal, .. },

        "*" => Token { kind: TokenKind::Star, .. },

        // parentheses
        "(" => Token { kind: TokenKind::LParen, .. },
        ")" => Token { kind: TokenKind::RParen, .. },
        "{" => Token { kind: TokenKind::LBrace, .. },
        "}" => Token { kind: TokenKind::RBrace, .. },
        "[" => Token { kind: TokenKind::LBracket, .. },
        "]" => Token { kind: TokenKind::RBracket, .. },

        "_Generic" => Token { kind: TokenKind::Generic, .. },
        "default" => Token { kind: TokenKind::Default, .. },
        ":" => Token { kind: TokenKind::Colon, .. },

        // StorageClassSpecifierToken
        "auto" => Token { kind: TokenKind::Auto, .. },
        "constexpr" => Token { kind: TokenKind::Constexpr, .. },
        "extern" => Token { kind: TokenKind::Extern, .. },
        "register" => Token { kind: TokenKind::Register, .. },
        "static" => Token { kind: TokenKind::Static, .. },
        "thread_local" => Token { kind: TokenKind::ThreadLocal, .. },
        "typedef" => Token { kind: TokenKind::Typedef, .. },

        // TypeSpecifierToken
        "void" => Token { kind: TokenKind::Void, .. },
        "char" => Token { kind: TokenKind::Char, .. },
        "short" => Token { kind: TokenKind::Short, .. },
        "int" => Token { kind: TokenKind::Int, .. },
        "long" => Token { kind: TokenKind::Long, .. },
        "float" => Token { kind: TokenKind::Float, .. },
        "double" => Token { kind: TokenKind::Double, .. },
        "signed" => Token { kind: TokenKind::Signed, .. },
        "unsigned" => Token { kind: TokenKind::Unsigned, .. },
        "bool" => Token { kind: TokenKind::Bool, .. },
        "_Complex" => Token { kind: TokenKind::Complex, .. },
        "_Decimal32" => Token { kind: TokenKind::Decimal32, .. },
        "_Decimal64" => Token { kind: TokenKind::Decimal64, .. },
        "_Decimal128" => Token { kind: TokenKind::Decimal128, .. },

        // TypeQualifierToken
        "const" => Token { kind: TokenKind::Const, .. },
        "restrict" => Token { kind: TokenKind::Restrict, .. },
        "volatile" => Token { kind: TokenKind::Volatile, .. },
        "_Atomic" => Token { kind: TokenKind::Atomic, .. },

        // FunctionSpecifierToken
        "inline" => Token { kind: TokenKind::Inline, .. },
        "_Noreturn" => Token { kind: TokenKind::Noreturn, .. },

        "return" => Token { kind: TokenKind::Return, .. },

        "sizeof" => Token { kind: TokenKind::Sizeof, .. },
        "_Lengthof" => Token { kind: TokenKind::Lengthof, ..},
        "alignof" => Token { kind: TokenKind::Alignof, .. },

        "+" => Token { kind: TokenKind::Plus, .. },
        "-" => Token { kind: TokenKind::Minus, .. },
        "~" => Token { kind: TokenKind::Tilde, .. },
        "!" => Token { kind: TokenKind::Bang, .. },

        "/" => Token { kind: TokenKind::Slash, .. },
        "%" => Token { kind: TokenKind::Percent, .. },

        "==" => Token { kind: TokenKind::EqualEqual, .. },
        "!=" => Token { kind: TokenKind::BangEqual, .. },

        "<" => Token { kind: TokenKind::Less, .. },
        "<=" => Token { kind: TokenKind::LessEqual, .. },
        ">" => Token { kind: TokenKind::Greater, .. },
        ">=" => Token { kind: TokenKind::GreaterEqual, .. },

        "&" => Token { kind: TokenKind::And, .. },
        "^" => Token { kind: TokenKind::Hat, .. },
        "|" => Token { kind: TokenKind::Pipe, .. },

        "<<" => Token { kind: TokenKind::LessLess, .. },
        ">>" => Token { kind: TokenKind::GreaterGreater, .. },

        "*=" => Token { kind: TokenKind::StarEqual, ..},
        "/=" => Token { kind: TokenKind::SlashEqual, ..},
        "%=" => Token { kind: TokenKind::PercentEqual, ..},
        "+=" => Token { kind: TokenKind::PlusEqual, ..},
        "-=" => Token { kind: TokenKind::MinusEqual, ..},
        "<<=" => Token { kind: TokenKind::LessLessEqual, ..},
        ">>=" => Token { kind: TokenKind::GreaterGreaterEqual, ..},
        "&=" => Token { kind: TokenKind::AndEqual, ..},
        "^=" => Token { kind: TokenKind::HatEqual, ..},
        "|=" => Token { kind: TokenKind::PipeEqual, ..},

        "&&" => Token { kind: TokenKind::AndAnd, .. },
        "||" => Token { kind: TokenKind::PipePipe, .. },

        "?" => Token { kind: TokenKind::QuestionMark, .. },
        ":" => Token { kind: TokenKind::Colon, .. },

        "++" => Token { kind: TokenKind::PlusPlus, .. },
        "--" => Token { kind: TokenKind::MinusMinus, ..},

        "." => Token { kind: TokenKind::Dot, .. },
        "..." => Token { kind: TokenKind::Ellipsis, .. },

        "true" => Token { kind: TokenKind::True, .. },
        "false" => Token { kind: TokenKind::False, .. },
        "nullptr" => Token { kind: TokenKind::Nullptr, .. },

        Identifier => Token { kind: TokenKind::Identifier, .. },
        TypedefName => Token { kind: TokenKind::TypeIdentifier, .. },
        Integer => Token { kind: TokenKind::Integer(_), .. },
        MaybeUnterminatedCharConstant => Token { kind: TokenKind::CharConstant(_), .. },
        MaybeUnterminatedString => Token { kind: TokenKind::String, .. },
    }
}

pub ConstantExpression: ast::Expression<'a> = {
    ConditionalExpression,
}

pub TranslationUnit: ast::TranslationUnit<'a> = {
    Many<ExternalDeclaration> => ast::TranslationUnit { decls: <> },
}

ExternalDeclaration: ast::ExternalDeclaration<'a> = {
    FunctionDefinition => ast::ExternalDeclaration::FunctionDefinition(<>),
    Declaration => ast::ExternalDeclaration::Declaration(<>),
}

FunctionDefinition: ast::FunctionDefinition<'a> = {
    <head:FunctionDefinitionHead> <body:FunctionBody> => {
        let (declaration_specifiers, declarator) = head;
        ast::FunctionDefinition { declaration_specifiers, declarator, body }
    }
}

FunctionDefinitionHead: (ast::DeclarationSpecifiers<'a>, ast::Declarator<'a>) = {
    AttributeSpecifierSequence? <head:DeclarationHead<AbstractDeclaratorDisallowed>> => {
        let (declaration_specifiers, declarator) = head;
        let ast::InitDeclarator { declarator, initialiser }
            = declarator.unwrap_or_else(|| todo!("error message; e. g. `int {{}}`"));
        assert!(
            initialiser.is_none(),
            "TODO: generate a good error message; e. g. `int a() = 42 {{}}`",
        );
        let mut typedef_names = typedef_names.borrow_mut();
        typedef_names.push_scope();
        // while parameters cannot be declared with a storage class (i. e. as a
        // `typedef` declaration), itâ€™s important for error recovery that we
        // can parse this case
        for (name, kind) in declarator.direct_declarator.parameter_names() {
            typedef_names.insert(name, kind);
        }
        (declaration_specifiers, declarator)
    },
}

FunctionBody = { CompoundStatement<DontPushTypedefScope> }

Declaration: ast::Declaration<'a> = {
    <head:DeclarationHead<AbstractDeclaratorDisallowed>>
    <init_declarator_list:("," <InitDeclaratorList>)?> <semi:";"> => {
        let (specifiers, declarator) = head;
        let init_declarator_list = match init_declarator_list {
            None => sess.alloc_slice_copy(declarator.as_slice()),
            Some(list) => {
                let mut init_declarator_list = vec![];
                init_declarator_list.extend(declarator);
                init_declarator_list.extend(list);
                sess.alloc_slice_copy(&init_declarator_list)
            }
        };
        is_in_typedef.set(false);
        ast::Declaration { specifiers, init_declarator_list, semi }
    },
    // attribute-specifier-sequence declaration-specifiers init_declarator_list ";"
    // static_assert-declaration
    // attribute-declaration
}

AbstractDeclaratorAllowed: ast::AbstractDeclaratorAllowed = {
    () => ast::AbstractDeclaratorAllowed::Yes,
}

AbstractDeclaratorDisallowed: ast::AbstractDeclaratorAllowed = {
    () => ast::AbstractDeclaratorAllowed::No,
}

DeclarationHead<IsAbstractDeclaratorAllowed>: (ast::DeclarationSpecifiers<'a>, Option<ast::InitDeclarator<'a>>) = {
    <is_abstract_declarator_allowed:IsAbstractDeclaratorAllowed>
    <specifiers:DeclarationSpecifiers> <declarator:InitDeclarator<MaybeAbstractDeclarator>?> => {
        let add_typedef_name = |name: Token<'a>| {
            let kind = if is_in_typedef.get() {
                TokenKind::TypeIdentifier
            }
            else {
                TokenKind::Identifier
            };
            typedef_names.borrow_mut().insert(name.slice(), kind);
        };

        if let ast::DeclarationSpecifiers([specifiers @ .., specifier]) = specifiers
            && !specifiers.is_empty()
            && let ast::DeclarationSpecifier::TypeSpecifierQualifier(
                ast::TypeSpecifierQualifier::Specifier(specifier),
            ) = specifier
            && let name = specifier.token
            && matches!(name.kind, TokenKind::Identifier | TokenKind::TypeIdentifier)
        {
            if declarator.is_none() {
                let declarator = ast::Declarator {
                    pointers: None,
                    direct_declarator: ast::DirectDeclarator::Identifier(name),
                };
                add_typedef_name(name);
                return (
                    ast::DeclarationSpecifiers(specifiers),
                    Some(ast::InitDeclarator { declarator, initialiser: None }),
                );
            }
            else if let Some(declarator) = declarator
                && let ast::InitDeclarator { declarator, initialiser } = declarator
                && let ast::Declarator { pointers, direct_declarator } = declarator
                && let Some(direct_declarator) = direct_declarator.with_name(sess, name)
            {
                let declarator = ast::Declarator { pointers, direct_declarator };
                add_typedef_name(name);
                return (
                    ast::DeclarationSpecifiers(specifiers),
                    Some(ast::InitDeclarator { declarator, initialiser }),
                );
            }
        }
        else if let ast::AbstractDeclaratorAllowed::No = is_abstract_declarator_allowed
            && let Some(ast::InitDeclarator { declarator, initialiser }) = declarator
            && let Some((name, declarator)) = declarator.reinterpret_as_concrete(sess)
        {
            add_typedef_name(name);
            return (specifiers, Some(ast::InitDeclarator { declarator, initialiser }));
        }
        (specifiers, declarator)
    },
}

DeclarationSpecifiers: ast::DeclarationSpecifiers<'a> = {
    Some<(<DeclarationSpecifier> AttributeSpecifierSequence?)> => ast::DeclarationSpecifiers(<>),
}

DeclarationSpecifier: ast::DeclarationSpecifier<'a> = {
    StorageClassSpecifier => ast::DeclarationSpecifier::StorageClass(<>),
    TypeSpecifierQualifier => ast::DeclarationSpecifier::TypeSpecifierQualifier(<>),
    FunctionSpecifier => ast::DeclarationSpecifier::FunctionSpecifier(<>),
}

InitDeclaratorList: &'a [ast::InitDeclarator<'a>] = {
    CommaSep<InitDeclarator<Declarator<AnyIdentifier, AnyIdentifier>>>,
}

InitDeclarator<Declarator>: ast::InitDeclarator<'a> = {
    <declarator:Declarator> <initialiser:("=" <Initialiser>)?> => {
        if let Some(name) = declarator.direct_declarator.name() {
            let kind = if is_in_typedef.get() {
                TokenKind::TypeIdentifier
            }
            else {
                TokenKind::Identifier
            };
            typedef_names.borrow_mut().insert(name, kind);
        }
        ast::InitDeclarator { <> }
    },
    "=" <Initialiser> => {
        ast::InitDeclarator {
            declarator: ast::Declarator {
                pointers: None,
                direct_declarator: ast::DirectDeclarator::Abstract,
            },
            initialiser: Some(<>),
        }
    },
}

Declarator<Identifier, ParenthesisedIdent>: ast::Declarator<'a> = {
    <pointers:Some<Pointer>>
    <direct_declarator:DirectDeclarator<AnyIdentifier, ParenthesisedIdent>> => {
        let pointers = Some(pointers);
        ast::Declarator { <> }
    },
    <direct_declarator:DirectDeclarator<Identifier, ParenthesisedIdent>> =>
        ast::Declarator { pointers: None, <> },
}

AnyIdentifier = {
    Identifier,
    TypedefName,
}

MaybeAbstractDeclarator: ast::Declarator<'a> = {
    Declarator<Identifier, Identifier>,
    AbstractDeclarator,
}

Pointer: ast::Pointer<'a> = {
    <star:"*"> AttributeSpecifierSequence? <qualifiers:Many<TypeQualifier>> => ast::Pointer { <> },
}

DirectDeclarator<NonambiguousIdent, ParenthesisedIdent>: ast::DirectDeclarator<'a> = {
    <NonambiguousIdent> AttributeSpecifierSequence? => ast::DirectDeclarator::Identifier(<>),
    "(" <declarator:Bump<Declarator<ParenthesisedIdent, ParenthesisedIdent>>> <close_paren:")"> =>
        ast::DirectDeclarator::Parenthesised { <> },
    <ArrayDeclarator<NonambiguousIdent, ParenthesisedIdent>> AttributeSpecifierSequence? =>
        ast::DirectDeclarator::ArrayDeclarator(<>),
    <FunctionDeclarator<NonambiguousIdent, ParenthesisedIdent>> AttributeSpecifierSequence? =>
        ast::DirectDeclarator::FunctionDeclarator(<>),
}

ArrayDeclarator<Identifier, ParenthesisedIdent>: ast::ArrayDeclarator<'a> = {
    // TODO: incomplete
    <direct_declarator:Bump<DirectDeclarator<Identifier, ParenthesisedIdent>>>
        "[" <type_qualifiers:Many<TypeQualifier>> <length:AssignmentExpression?> <close_bracket:"]"> =>
            ast::ArrayDeclarator { <> },
}

FunctionDeclarator<Identifier, ParenthesisedIdent>: ast::FunctionDeclarator<'a> = {
    <direct_declarator:Bump<DirectDeclarator<Identifier, ParenthesisedIdent>>> "("
        PushTypedefScope
        <parameter_type_list:ParameterTypeList>
        PopTypedefScope
    <close_paren:")"> =>
        ast::FunctionDeclarator { <> },
}

ParameterTypeList: ast::ParameterTypeList<'a> = {
    () => ast::ParameterTypeList { parameter_list: &[], is_varargs: false },
    <parameter_list:NonEmptyCommaSep<ParameterDeclaration>> <is_varargs:("," "...")?> => {
        let is_varargs = is_varargs.is_some();
        ast::ParameterTypeList { <> }
    },
    "..." => ast::ParameterTypeList { parameter_list: &[], is_varargs: true },
}

ParameterDeclaration: ast::ParameterDeclaration<'a> = {
    AttributeSpecifierSequence? <declarator:DeclarationHead<AbstractDeclaratorAllowed>> => {
        let (declaration_specifiers, declarator) = declarator;
        let declarator = try {
            let ast::InitDeclarator { declarator, initialiser } = declarator?;
            if let Some(initialiser) = initialiser {
                sess.emit(ast::Diagnostic::DefaultParameter {
                    at: initialiser,
                    param_loc: declarator.loc_with(declaration_specifiers),
                })
            }
            declarator
        };
        ast::ParameterDeclaration { declaration_specifiers, declarator }
    },
}

ParameterDeclarator: Option<ast::Declarator<'a>> = {
    Declarator<Identifier, Identifier> => Some(<>),
    AbstractDeclarator?,
}

DeclarationSpecifierTypeSpecifierQualifier: ast::DeclarationSpecifier<'a> = {
    TypeSpecifierQualifier => ast::DeclarationSpecifier::TypeSpecifierQualifier(<>),
}

SpecifierQualifierList: ast::DeclarationSpecifiers<'a> = {
    <Some<DeclarationSpecifierTypeSpecifierQualifier>> AttributeSpecifierSequence? =>
        ast::DeclarationSpecifiers(<>),
}

TypeName: crate::ast::QualifiedType<'a> = {
    <specifier_qualifier_list:SpecifierQualifierList> <abstract_declarator:AbstractDeclarator?> => {
        let crate::ast::DeclarationSpecifiers { storage_class: _, ty }
            = crate::ast::parse_declaration_specifiers(sess, specifier_qualifier_list);
        match abstract_declarator {
            None => ty,
            Some(abstract_declarator) => {
                let (ty, name) = crate::ast::parse_declarator(sess, ty, abstract_declarator);
                assert!(name.is_none());
                ty
            },
        }
    },
}

// TODO: `AbstractDeclarator` basically copies the structure of `Declarator`,
// which leads to a lot of duplication. Maybe a macro can reduce this?
AbstractDeclarator: ast::Declarator<'a> = {
    Some<Pointer> => ast::Declarator { pointers: Some(<>), direct_declarator: ast::DirectDeclarator::Abstract },
    <pointers:Some<Pointer>?> <direct_declarator:DirectAbstractDeclarator>
        => ast::Declarator { <> },
}

DirectAbstractDeclarator: ast::DirectDeclarator<'a> = {
    "(" <declarator:Bump<AbstractDeclarator>> <close_paren:")"> =>
        ast::DirectDeclarator::Parenthesised { <> },
    <ArrayAbstractDeclarator> AttributeSpecifierSequence? =>
        ast::DirectDeclarator::ArrayDeclarator(<>),
    <FunctionAbstractDeclarator> AttributeSpecifierSequence? =>
        ast::DirectDeclarator::FunctionDeclarator(<>),
}

ArrayAbstractDeclarator: ast::ArrayDeclarator<'a> = {
    // TODO: incomplete
    <direct_declarator:Bump<DirectAbstractDeclarator>?>
        "[" <type_qualifiers:Many<TypeQualifier>> <length:AssignmentExpression?> <close_bracket:"]"> => {
            let direct_declarator = direct_declarator.unwrap_or(&ast::DirectDeclarator::Abstract);
            ast::ArrayDeclarator { <> }
        },
}

FunctionAbstractDeclarator: ast::FunctionDeclarator<'a> = {
    <direct_declarator:Bump<DirectAbstractDeclarator>?>
        "(" <parameter_type_list:ParameterTypeList> <close_paren:")"> => {
            let direct_declarator = direct_declarator.unwrap_or(&ast::DirectDeclarator::Abstract);
            ast::FunctionDeclarator { <> }
        },
}

Initialiser: ast::Initialiser<'a> = {
    // TODO: incomplete: `braced-initializer` can be nonempty
    <open_brace:"{"> <initialiser_list:CommaSepWithTrailingComma<DesignatedInitialiser>>
        <close_brace:"}"> => ast::Initialiser::Braced { <> },
    AssignmentExpression => ast::Initialiser::Expression(<>),
}

DesignatedInitialiser: ast::DesignatedInitialiser<'a> = {
    <designation:(<Designation> "=")?> <initialiser:Bump<Initialiser>> => ast::DesignatedInitialiser { <> },
}

Designation: ast::Designation<'a> = {
    Some<Designator> => ast::Designation(<>),
}

Designator: ast::Designator<'a> = {
    <open_bracket:"["> <index:Expression> <close_bracket:"]"> => ast::Designator::Bracketed { <> },
    <dot:"."> <ident:Identifier> => ast::Designator::Identifier { <> },
}

AttributeSpecifierSequence: () = {}

StorageClassSpecifier: ast::StorageClassSpecifier<'a> = {
    StorageClassSpecifierToken => ast::StorageClassSpecifier::new(<>),
}

StorageClassSpecifierToken = {
    "auto",
    "constexpr",
    "extern",
    "register",
    "static",
    "thread_local",
    "typedef" => {
        is_in_typedef.set(true);
        <>
    },
}

TypeSpecifierQualifier: ast::TypeSpecifierQualifier<'a> = {
    TypeSpecifier => ast::TypeSpecifierQualifier::Specifier(<>),
    TypeQualifier => ast::TypeSpecifierQualifier::Qualifier(<>),
}

TypeSpecifier: ast::TypeSpecifier<'a> = {
    TypeSpecifierToken => ast::TypeSpecifier::new(<>),
    BitIntTypeSpecifier => todo!(),
    AtomicTypeSpecifier => todo!(),
    StructOrUnionSpecifier => todo!(),
    EnumSpecifier => todo!(),
    TypedefName => ast::TypeSpecifier::new(<>),
    TypeofSpecifier => todo!(),
}

TypeSpecifierToken = {
    "void",
    "char",
    "short",
    "int",
    "long",
    "float",
    "double",
    "signed",
    "unsigned",
    "bool",
    "_Complex",
    "_Decimal32",
    "_Decimal64",
    "_Decimal128",
}

BitIntTypeSpecifier: () = {}
AtomicTypeSpecifier: () = {}
StructOrUnionSpecifier: () = {}
EnumSpecifier: () = {}
TypeofSpecifier: () = {}

TypeQualifier: ast::TypeQualifier<'a> = {
    TypeQualifierToken => ast::TypeQualifier::new(<>),
}

TypeQualifierToken = {
    "const",
    "restrict",
    "volatile",
    "_Atomic",
}

FunctionSpecifier: ast::FunctionSpecifier<'a> = {
    FunctionSpecifierToken => ast::FunctionSpecifier::new(<>),
}

FunctionSpecifierToken = {
    "inline",
    "_Noreturn",
}

CompoundStatement<PushTypedefScope>: ast::CompoundStatement<'a> = {
    "{" PushTypedefScope <BlockItemList?> PopTypedefScope "}" =>
        ast::CompoundStatement(<>.unwrap_or(&[])),
}

PushTypedefScope: () = {
    () => {
        typedef_names.borrow_mut().push_scope();
    },
}

DontPushTypedefScope: () = { () => () }

PopTypedefScope: () = {
    () => {
        typedef_names.borrow_mut().pop_scope();
    },
}

BlockItemList: &'a [ast::BlockItem<'a>] = {
    Some<BlockItem>,
}

BlockItem: ast::BlockItem<'a> = {
    Declaration => ast::BlockItem::Declaration(<>),
    UnlabeledStatement => ast::BlockItem::UnlabeledStatement(<>),
    // label
}

UnlabeledStatement: ast::UnlabeledStatement<'a> = {
    ExpressionStatement => ast::UnlabeledStatement::ExpressionStatement(<>),
    AttributeSpecifierSequence? <PrimaryBlock> => ast::UnlabeledStatement::PrimaryBlock(<>),
    AttributeSpecifierSequence? <JumpStatement> => ast::UnlabeledStatement::JumpStatement(<>),
}

PrimaryBlock: ast::PrimaryBlock<'a> = {
    CompoundStatement<PushTypedefScope> => ast::PrimaryBlock::CompoundStatement(<>),
    // selection-statement
    // iteration-statement
}

JumpStatement: ast::JumpStatement<'a> = {
    // goto Identifier ;
    // continue ;
    // break ;
    <return_:"return"> <expr:Expression?> ";" => ast::JumpStatement::Return { <> },
}

ExpressionStatement: ast::ExpressionStatement<'a> = {
    <Expression?> ";" => ast::ExpressionStatement(<>),
    // FIXME: this produces a conflict
    // AttributeSpecifierSequence? <Expression> ";" => ast::ExpressionStatement(Some(<>)),
}

PrimaryExpression: ast::Expression<'a> = {
    Identifier => ast::Expression::Name(<>),
    Integer => ast::Expression::Integer(<>),
    CharConstant => ast::Expression::CharConstant(<>),
    PredefinedConstant,
    Some<String> => ast::Expression::String(<>),
    <open_paren:"("> <expr:Bump<Expression>> <close_paren:")"> => ast::Expression::Parenthesised { <> },
    <generic:"_Generic"> "("
        <selector:Bump<AssignmentExpression>> ","
        <assocs:GenericAssocList>
        <close_paren:")"> => ast::Expression::Generic { <> },
}

GenericAssocList: ast::GenericAssocList<'a> = {
    NonEmptyCommaSep<GenericAssociation> => ast::GenericAssocList(<>),
}

GenericAssociation: ast::GenericAssociation<'a> = {
    <ty:TypeName> ":" <expr:AssignmentExpression> => ast::GenericAssociation::Ty { <> },
    <default:"default"> ":" <expr:AssignmentExpression> => ast::GenericAssociation::Default { <> },
}

IncrementOperator: ast::IncrementOp<'a> = {
    "++" => ast::IncrementOp { kind: ast::IncrementOpKind::Increment, token: <> },
    "--" => ast::IncrementOp { kind: ast::IncrementOpKind::Decrement, token: <> },
}

PostfixExpression: ast::Expression<'a> = {
    PrimaryExpression,
    <callee:Bump<PostfixExpression>> "(" <args:ArgumentExpressionList> <close_paren:")"> =>
        ast::Expression::Call { <> },
    <lhs:Bump<PostfixExpression>> "[" <rhs:Bump<Expression>> <close_bracket:"]"> =>
        ast::Expression::Subscript { <> },
    <operand:Bump<PostfixExpression>> <operator:IncrementOperator> =>
        ast::Expression::Increment { <>, fixity: ast::IncrementFixity::Postfix },
}

ArgumentExpressionList = { CommaSep<AssignmentExpression> }

UnaryOperator: ast::UnaryOp<'a> = {
    "&" => ast::UnaryOp { kind: ast::UnaryOpKind::Addressof, token: <> },
    "*" => ast::UnaryOp { kind: ast::UnaryOpKind::Deref, token: <> },
    "+" => ast::UnaryOp { kind: ast::UnaryOpKind::Plus, token: <> },
    "-" => ast::UnaryOp { kind: ast::UnaryOpKind::Negate, token: <> },
    "~" => ast::UnaryOp { kind: ast::UnaryOpKind::Compl, token: <> },
    "!" => ast::UnaryOp { kind: ast::UnaryOpKind::Not, token: <> },
}

UnaryExpression: ast::Expression<'a> = {
    PostfixExpression,
    <operator:UnaryOperator> <operand:Bump<CastExpression>> => ast::Expression::UnaryOp { <> },
    <sizeof:"sizeof"> <operand:Bump<UnaryExpression>> => ast::Expression::UnaryOp {
        operator: ast::UnaryOp { kind: ast::UnaryOpKind::Sizeof, token: sizeof },
        operand,
    },
    // TODO: `_Lengthof` basically duplicates all of the code for `sizeof`.
    <lengthof:"_Lengthof"> <operand:Bump<UnaryExpression>> => ast::Expression::UnaryOp {
        operator: ast::UnaryOp { kind: ast::UnaryOpKind::Lengthof, token: lengthof },
        operand,
    },
    <sizeof:"sizeof"> "(" <ty:TypeName> <close_paren:")"> => ast::Expression::Sizeof { <> },
    <lengthof:"_Lengthof"> "(" <ty:TypeName> <close_paren:")"> => ast::Expression::Lengthof { <> },
    <alignof:"alignof"> "(" <ty:TypeName> <close_paren:")"> => ast::Expression::Alignof { <> },
    <operator:IncrementOperator> <operand:Bump<UnaryExpression>> =>
        ast::Expression::Increment { <>, fixity: ast::IncrementFixity::Prefix },
}

CastExpression: ast::Expression<'a> = {
    UnaryExpression,
    <open_paren:"("> <ty:TypeName> ")" <expr:Bump<CastExpression>> => ast::Expression::Cast { <> },
}

MultiplicativeOperator: ast::BinOp<'a> = {
    "*" => ast::BinOp { kind: ast::BinOpKind::Multiply, token: <> },
    "/" => ast::BinOp { kind: ast::BinOpKind::Divide, token: <> },
    "%" => ast::BinOp { kind: ast::BinOpKind::Modulo, token: <> },
}

MultiplicativeExpression: ast::Expression<'a> = {
    CastExpression,
    <lhs:Bump<MultiplicativeExpression>> <op:MultiplicativeOperator> <rhs:Bump<CastExpression>> =>
        ast::Expression::BinOp { <> },
}

AdditiveOperator: ast::BinOp<'a> = {
    "+" => ast::BinOp { kind: ast::BinOpKind::Add, token: <> },
    "-" => ast::BinOp { kind: ast::BinOpKind::Subtract, token: <> },
}

AdditiveExpression: ast::Expression<'a> = {
    MultiplicativeExpression,
    <lhs:Bump<AdditiveExpression>> <op:AdditiveOperator> <rhs:Bump<MultiplicativeExpression>> =>
        ast::Expression::BinOp { <> },
}

ShiftOperator: ast::BinOp<'a> = {
    "<<" => ast::BinOp { kind: ast::BinOpKind::LeftShift, token: <> },
    ">>" => ast::BinOp { kind: ast::BinOpKind::RightShift, token: <> },
}

ShiftExpression: ast::Expression<'a> = {
    AdditiveExpression,
    <lhs:Bump<ShiftExpression>> <op:ShiftOperator> <rhs:Bump<AdditiveExpression>> =>
        ast::Expression::BinOp { <> },
}

RelationalOperator: ast::BinOp<'a> = {
    "<" => ast::BinOp { kind: ast::BinOpKind::Less, token: <> },
    "<=" => ast::BinOp { kind: ast::BinOpKind::LessEqual, token: <> },
    ">" => ast::BinOp { kind: ast::BinOpKind::Greater, token: <> },
    ">=" => ast::BinOp { kind: ast::BinOpKind::GreaterEqual, token: <> },
}

RelationalExpression: ast::Expression<'a> = {
    ShiftExpression,
    <lhs:Bump<RelationalExpression>> <op:RelationalOperator> <rhs:Bump<ShiftExpression>> =>
        ast::Expression::BinOp { <> },
}

EqualityOperator: ast::BinOp<'a> = {
    "==" => ast::BinOp { kind: ast::BinOpKind::Equal, token: <> },
    "!=" => ast::BinOp { kind: ast::BinOpKind::NotEqual, token: <> },
}

EqualityExpression: ast::Expression<'a> = {
    RelationalExpression,
    <lhs:Bump<EqualityExpression>> <op:EqualityOperator> <rhs:Bump<RelationalExpression>> =>
        ast::Expression::BinOp { <> },
}

BitAndOperator: ast::BinOp<'a> = {
    "&" => ast::BinOp { kind: ast::BinOpKind::BitAnd, token: <> },
}

BitAndExpression: ast::Expression<'a> = {
    EqualityExpression,
    <lhs:Bump<BitAndExpression>> <op:BitAndOperator> <rhs:Bump<EqualityExpression>> =>
        ast::Expression::BinOp { <> },
}

BitXorOperator: ast::BinOp<'a> = {
    "^" => ast::BinOp { kind: ast::BinOpKind::BitXor, token: <> },
}

BitXorExpression: ast::Expression<'a> = {
    BitAndExpression,
    <lhs:Bump<BitXorExpression>> <op:BitXorOperator> <rhs:Bump<BitAndExpression>> =>
        ast::Expression::BinOp { <> },
}

BitOrOperator: ast::BinOp<'a> = {
    "|" => ast::BinOp { kind: ast::BinOpKind::BitOr, token: <> },
}

BitOrExpression: ast::Expression<'a> = {
    BitXorExpression,
    <lhs:Bump<BitOrExpression>> <op:BitOrOperator> <rhs:Bump<BitXorExpression>> =>
        ast::Expression::BinOp { <> },
}

LogicalAndOperator: ast::LogicalOp<'a> = {
    "&&" => ast::LogicalOp { kind: ast::LogicalOpKind::And, token: <> },
}

LogicalAndExpression: ast::Expression<'a> = {
    BitOrExpression,
    <lhs:Bump<LogicalAndExpression>> <op:LogicalAndOperator> <rhs:Bump<BitOrExpression>> =>
        ast::Expression::Logical { <> },
}

LogicalOrOperator: ast::LogicalOp<'a> = {
    "||" => ast::LogicalOp { kind: ast::LogicalOpKind::Or, token: <> },
}

LogicalOrExpression: ast::Expression<'a> = {
    LogicalAndExpression,
    <lhs:Bump<LogicalOrExpression>> <op:LogicalOrOperator> <rhs:Bump<LogicalAndExpression>> =>
        ast::Expression::Logical { <> },
}

ConditionalExpression: ast::Expression<'a> = {
    LogicalOrExpression,
    <condition:Bump<LogicalOrExpression>>
        <question_mark:"?"> <then:Bump<Expression>>
        ":" <or_else:Bump<ConditionalExpression>> => ast::Expression::Conditional { <> },
}

CompoudAssignmentOperator: ast::BinOp<'a> = {
    "*=" => ast::BinOp { kind: ast::BinOpKind::Multiply, token: <> },
    "/=" => ast::BinOp { kind: ast::BinOpKind::Divide, token: <> },
    "%=" => ast::BinOp { kind: ast::BinOpKind::Modulo, token: <> },
    "+=" => ast::BinOp { kind: ast::BinOpKind::Add, token: <> },
    "-=" => ast::BinOp { kind: ast::BinOpKind::Subtract, token: <> },
    "<<=" => ast::BinOp { kind: ast::BinOpKind::LeftShift, token: <> },
    ">>=" => ast::BinOp { kind: ast::BinOpKind::RightShift, token: <> },
    "&=" => ast::BinOp { kind: ast::BinOpKind::BitAnd, token: <> },
    "^=" => ast::BinOp { kind: ast::BinOpKind::BitXor, token: <> },
    "|=" => ast::BinOp { kind: ast::BinOpKind::BitOr, token: <> },
}

AssignmentExpression: ast::Expression<'a> = {
    ConditionalExpression,
    <target:Bump<UnaryExpression>> "=" <value:Bump<AssignmentExpression>> => ast::Expression::Assign { <> },
    <target:Bump<UnaryExpression>> <op:CompoudAssignmentOperator> <value:Bump<AssignmentExpression>> =>
        ast::Expression::CompoundAssign { <> },
}

Expression: ast::Expression<'a> = {
    AssignmentExpression,
    <lhs:Bump<Expression>> "," <rhs:Bump<AssignmentExpression>> => ast::Expression::Comma { <> },
}

String: ast::Token<'a> = {
    <token:MaybeUnterminatedString> =>? {
        if token.slice().as_bytes().last() == Some(&b'"') {
            Ok(token)
        }
        else {
            Err(sess.alloc(ast::Error::UnterminatedStringLiteral { at: token.loc() }).into())
        }
    },
}

CharConstant: ast::Token<'a> = {
    <token:MaybeUnterminatedCharConstant> =>? {
        if token.slice().as_bytes().last() == Some(&b'\'') {
            Ok(token)
        }
        else {
            Err(sess.alloc(ast::Error::UnterminatedCharConstant { at: token.loc() }).into())
        }
    },
}

PredefinedConstant: ast::Expression<'a> = {
    "true" => ast::Expression::Integer(<>),
    "false" => ast::Expression::Integer(<>),
    "nullptr" => ast::Expression::Nullptr(<>),
}

Bump<T>: &'a T = {
    T => sess.alloc(<>),
}

Some<T>: &'a [T] = {
    T+ => sess.alloc_slice_copy(&<>),
}

Many<T>: &'a [T] = {
    T* => sess.alloc_slice_copy(&<>),
}

CommaSep<T>: &'a [T] = {
    () => &[],
    NonEmptyCommaSep<T>,
}

CommaSepWithTrailingComma<T>: &'a [T] = {
    () => &[],
    <NonEmptyCommaSep<T>> ","?,
}

#[inline]
NonEmptyCommaSep<T>: &'a [T] = {
    <mut v:(<T> ",")*> <e:T> => {
        v.push(e);
        sess.alloc_slice_copy(&v)
    },
}
